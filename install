#!/bin/bash

# Helium Installation Script
# This script automates the installation process for Helium dashboard

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print colored output
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

print_header() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
}

# ASCII Banner
print_banner() {
    echo -e "${CYAN}"
    cat << "EOF"
    ╦ ╦┌─┐┬  ┬┬ ┬┌┬┐
    ╠═╣├┤ │  ││ ││││
    ╩ ╩└─┘┴─┘┴└─┘┴ ┴
    Pterodactyl Dashboard
EOF
    echo -e "${NC}"
}

# Check if running as root (optional warning)
check_root() {
    if [ "$EUID" -eq 0 ]; then 
        print_warning "Running as root. Consider using a non-root user for security."
        read -p "Continue anyway? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Check system requirements
check_requirements() {
    print_header "Checking System Requirements"
    
    local all_good=true
    
    # Check Node.js
    if command -v node >/dev/null 2>&1; then
        NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_VERSION" -ge 16 ]; then
            print_success "Node.js $(node --version) installed"
        else
            print_error "Node.js version 16+ required (found v$NODE_VERSION)"
            all_good=false
        fi
    elif command -v bun >/dev/null 2>&1; then
        print_success "Bun $(bun --version) installed"
    else
        print_error "Node.js 16+ or Bun required"
        print_info "Install Node.js: https://nodejs.org/"
        print_info "Or install Bun: https://bun.sh/"
        all_good=false
    fi
    
    # Check npm/package manager
    if command -v npm >/dev/null 2>&1; then
        print_success "npm $(npm --version) installed"
    elif command -v bun >/dev/null 2>&1; then
        print_success "Bun package manager available"
    else
        print_error "npm or bun required"
        all_good=false
    fi
    
    # Check Git
    if command -v git >/dev/null 2>&1; then
        print_success "Git $(git --version | cut -d' ' -f3) installed"
    else
        print_warning "Git not found (optional)"
    fi
    
    # Check disk space
    AVAILABLE_SPACE=$(df -BG . | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ "$AVAILABLE_SPACE" -ge 1 ]; then
        print_success "Sufficient disk space (${AVAILABLE_SPACE}GB available)"
    else
        print_error "Insufficient disk space (${AVAILABLE_SPACE}GB available, 1GB+ required)"
        all_good=false
    fi
    
    # Check if settings.json already exists
    if [ -f "settings.json" ]; then
        print_warning "settings.json already exists"
        read -p "Overwrite with example settings? (y/N): " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mv settings.json settings.json.backup.$(date +%s)
            print_info "Backed up existing settings.json"
        fi
    fi
    
    if [ "$all_good" = false ]; then
        print_error "System requirements not met. Please install missing dependencies."
        exit 1
    fi
    
    echo ""
}

# Install dependencies
install_dependencies() {
    print_header "Installing Dependencies"
    
    if command -v bun >/dev/null 2>&1; then
        print_info "Using Bun package manager..."
        bun install
    else
        print_info "Using npm package manager..."
        npm install
    fi
    
    print_success "Dependencies installed successfully"
    echo ""
}

# Copy settings example
setup_settings() {
    print_header "Setting Up Configuration"
    
    if [ ! -f "settings.json" ]; then
        if [ -f "settings.example.json" ]; then
            cp settings.example.json settings.json
            print_success "Created settings.json from example"
        else
            print_error "settings.example.json not found"
            exit 1
        fi
    else
        print_info "settings.json already exists, skipping..."
    fi
    
    echo ""
}

# Run database migrations
run_migrations() {
    print_header "Running Database Migrations"
    
    if command -v bun >/dev/null 2>&1; then
        bun run migrate
    else
        npm run migrate
    fi
    
    print_success "Database migrations completed"
    echo ""
}

# Create necessary directories
create_directories() {
    print_header "Creating Directories"
    
    mkdir -p backups
    print_success "Created backups/ directory"
    
    mkdir -p logs
    print_success "Created logs/ directory"
    
    # Set permissions
    chmod 755 backups logs
    
    if [ -f "database.sqlite" ]; then
        chmod 644 database.sqlite
        print_success "Set database.sqlite permissions"
    fi
    
    echo ""
}

# Prompt for basic configuration
configure_basics() {
    print_header "Basic Configuration"
    
    print_info "You'll need to configure the following in settings.json:"
    echo ""
    echo "  1. Pterodactyl Panel URL and API key"
    echo "  2. Discord OAuth2 client ID and secret"
    echo "  3. Website port (default: 19133)"
    echo "  4. Website secret (random string)"
    echo ""
    
    read -p "Open settings.json now for editing? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if command -v nano >/dev/null 2>&1; then
            nano settings.json
        elif command -v vim >/dev/null 2>&1; then
            vim settings.json
        elif command -v vi >/dev/null 2>&1; then
            vi settings.json
        else
            print_warning "No text editor found. Please edit settings.json manually."
        fi
    fi
    
    echo ""
}

# Print next steps
print_next_steps() {
    print_header "Installation Complete!"
    
    echo -e "${GREEN}✓ Helium has been installed successfully!${NC}\n"
    
    echo -e "${CYAN}Next Steps:${NC}\n"
    
    echo "1. Configure settings.json:"
    echo "   - Add your Pterodactyl Panel URL and API key"
    echo "   - Configure Discord OAuth2 credentials"
    echo "   - Set a secure website secret"
    echo ""
    
    echo "2. Start the application:"
    if command -v bun >/dev/null 2>&1; then
        echo -e "   ${YELLOW}bun run start:bun${NC}  (Recommended - faster)"
    fi
    echo -e "   ${YELLOW}npm start${NC}"
    echo ""
    
    echo "3. Access the dashboard:"
    echo "   Open your browser to: http://localhost:19133"
    echo "   (Or the port you configured)"
    echo ""
    
    echo "4. Optional setup:"
    echo "   - Configure NGINX reverse proxy (see README.md)"
    echo "   - Set up systemd service for auto-start"
    echo "   - Enable SSL/TLS certificates"
    echo "   - Configure Discord role rewards (see DISCORD_ROLE_SETUP.md)"
    echo ""
    
    echo -e "${CYAN}Documentation:${NC}"
    echo "   - README.md - Full documentation"
    echo "   - BOTAPI.md - API documentation"
    echo "   - DISCORD_ROLE_SETUP.md - Discord integration"
    echo ""
    
    echo -e "${GREEN}Happy hosting! 🚀${NC}\n"
}

# Main installation process
main() {
    clear
    print_banner
    
    echo -e "${CYAN}Helium Installation Script${NC}"
    echo -e "Version 1.0.0 - Cascade Ridge\n"
    
    check_root
    check_requirements
    install_dependencies
    setup_settings
    run_migrations
    create_directories
    configure_basics
    print_next_steps
}

# Run main function
main
