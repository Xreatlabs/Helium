<html <% if (isDarkMode) { %> class="dark" <% } %>>
<head>
  <title><%= settings.name %></title>
  <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
  <script>
    (function() {
      try {
        var ls = localStorage.getItem('darkMode');
        var preferDark = (ls === 'true') || (ls === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
        if (preferDark) document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      } catch (e) {}
    })();
  </script>
  <link rel="stylesheet" href="../assets/tailwind.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
  <!-- Inter font -->
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script>
    // Show version information and make it clickable to go to Helium GitHub
    document.addEventListener('DOMContentLoaded', () => {
      const currentVersion = '<%= settings.version %>';
      const versionSpan = document.getElementById('currentVersion');
      const versionStatusSpan = document.getElementById('versionStatus');

      if (versionSpan) versionSpan.textContent = 'v' + currentVersion;
      if (versionStatusSpan) {
        versionStatusSpan.innerHTML = 'Click to view on GitHub';
        versionStatusSpan.style.cursor = 'pointer';
      }
      
      // Make the whole card clickable to go to GitHub
      const versionCard = versionSpan?.closest('.bg-gradient-to-br');
      if (versionCard) {
        versionCard.style.cursor = 'pointer';
        versionCard.title = 'View Helium on GitHub';
        versionCard.onclick = () => {
          window.open('https://github.com/xreatlabs/helium', '_blank');
        };
      }

      // Show the content
      document.getElementById('content')?.classList.remove('hidden');
    });
  </script>
</head>

<body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200" style="font-family: 'Inter', sans-serif;">
  <div>
    <%- include('../components/navigation') %>
    <div class="md:pl-64 flex flex-col flex-1 min-h-screen">
      <main class="flex-1 pb-8">
        <div class="py-6">
          <%- include('../components/darkmode-toggle') %>
          <% /* Skeleton loader, lasts about 0.3s to let the page content load */ %>
          <%- include('../components/skeleton') %>
          <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
            <!-- Header -->
            <div class="mb-8">
              <div class="flex items-center gap-4 mb-6">
                <div class="relative">
                  <div class="bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl h-16 w-16 flex items-center justify-center shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8 text-white">
                      <path fill-rule="evenodd" d="M11.078 2.25c-.917 0-1.699.663-1.85 1.567L9.05 4.889c-.02.12-.115.26-.297.348a7.493 7.493 0 00-.986.57c-.166.115-.334.126-.45.083L6.3 5.508a1.875 1.875 0 00-2.282.819l-.922 1.597a1.875 1.875 0 00.432 2.385l.84.692c.095.078.17.229.154.43a7.598 7.598 0 000 1.139c.015.2-.059.352-.153.43l-.841.692a1.875 1.875 0 00-.432 2.385l.922 1.597a1.875 1.875 0 002.282.818l1.019-.382c.115-.043.283-.031.45.082.312.214.641.405.985.57.182.088.277.228.297.35l.178 1.071c.151.904.933 1.567 1.85 1.567h1.844c.916 0 1.699-.663 1.85-1.567l.178-1.072c.02-.12.114-.26.297-.349.344-.165.673-.356.985-.57.167-.114.335-.125.45-.082l1.02.382a1.875 1.875 0 002.28-.819l.923-1.597a1.875 1.875 0 00-.432-2.385l-.84-.692c-.095-.078-.17-.229-.154-.43a7.614 7.614 0 000-1.139c-.016-.2.059-.352.153-.43l.84-.692c.708-.582.891-1.59.433-2.385l-.922-1.597a1.875 1.875 0 00-2.282-.818l-1.02.382c-.114.043-.282.031-.449-.083a7.49 7.49 0 00-.985-.57c-.183-.087-.277-.227-.297-.348l-.179-1.072a1.875 1.875 0 00-1.85-1.567h-1.843zM12 15.75a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
                <div class="flex-1">
                  <h1 class="text-3xl font-bold text-gray-900 dark:text-white tracking-tight">Admin Dashboard</h1>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Manage your Helium panel, users, and configurations</p>
                </div>
              </div>
            </div>

            <!-- Error Message -->
            <% if (req.query.err) { %>
            <div class="rounded-2xl bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 p-6 mb-6">
              <div class="flex items-start gap-3">
                <div class="flex-shrink-0">
                  <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
                  </svg>
                </div>
                <div class="flex-1">
                  <h3 class="text-sm font-semibold text-red-800 dark:text-red-300">An error was encountered</h3>
                  <p class="mt-1 text-sm text-red-700 dark:text-red-400">
                    Error code: <code class="bg-red-100 dark:bg-red-900/50 px-2 py-0.5 rounded font-mono text-xs"><%= req.query.err %></code>
                  </p>
                </div>
              </div>
            </div>
            <% } %>

            <!-- Stats Overview -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
              <!-- Version Card -->
              <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl p-6 text-white shadow-lg">
                <div class="flex items-center justify-between mb-2">
                  <svg class="w-8 h-8 opacity-80" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd" />
                  </svg>
                  <span class="text-xs font-medium bg-white/20 px-2 py-1 rounded-full" id="currentVersion">Loading...</span>
                </div>
                <p class="text-2xl font-bold">Helium</p>
                <p class="text-xs opacity-90 mt-1" id="versionStatus">Checking for updates...</p>
              </div>

              <!-- System Status -->
              <div class="bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl p-6 text-white shadow-lg">
                <div class="flex items-center justify-between mb-2">
                  <svg class="w-8 h-8 opacity-80" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
                  </svg>
                  <span class="text-xs font-medium bg-white/20 px-2 py-1 rounded-full">Online</span>
                </div>
                <p class="text-2xl font-bold">System</p>
                <p class="text-xs opacity-90 mt-1">All services operational</p>
              </div>

              <!-- Panel Link -->
              <div class="bg-gradient-to-br from-blue-500 to-cyan-600 rounded-2xl p-6 text-white shadow-lg">
                <div class="flex items-center justify-between mb-2">
                  <svg class="w-8 h-8 opacity-80" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd" />
                  </svg>
                </div>
                <p class="text-2xl font-bold">Pterodactyl</p>
                <a href="<%= settings.pterodactyl.domain %>" target="_blank" class="text-xs opacity-90 mt-1 hover:opacity-100 inline-flex items-center gap-1">
                  Open Panel
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              </div>

              <!-- Quick Actions -->
              <div class="bg-gradient-to-br from-orange-500 to-red-600 rounded-2xl p-6 text-white shadow-lg">
                <div class="flex items-center justify-between mb-2">
                  <svg class="w-8 h-8 opacity-80" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M11 3a1 1 0 10-2 0v1a1 1 0 102 0V3zM15.657 5.757a1 1 0 00-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zM18 10a1 1 0 01-1 1h-1a1 1 0 110-2h1a1 1 0 011 1zM5.05 6.464A1 1 0 106.464 5.05l-.707-.707a1 1 0 00-1.414 1.414l.707.707zM5 10a1 1 0 01-1 1H3a1 1 0 110-2h1a1 1 0 011 1zM8 16v-1h4v1a2 2 0 11-4 0zM12 14c.015-.34.208-.646.477-.859a4 4 0 10-4.954 0c.27.213.462.519.476.859h4.002z" />
                  </svg>
                </div>
                <p class="text-2xl font-bold">Actions</p>
                <button onclick="showConfigTab('users')" class="text-xs opacity-90 mt-1 hover:opacity-100 inline-flex items-center gap-1">
                  Manage Users →
                </button>
              </div>
            </div>

            <!-- Panel Configuration -->
            <div class="bg-white dark:bg-gray-800 rounded-3xl p-8 border border-gray-200 dark:border-gray-700 mt-10">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">Panel Configuration</h2>
              <div class="border-b border-gray-200 dark:border-gray-700">
                <nav class="-mb-px flex space-x-8">
                  <button onclick="showConfigTab('eggs')" id="tab-btn-eggs" class="config-tab-button border-b-2 border-blue-500 py-4 px-1 text-sm font-medium text-blue-600 dark:text-blue-400">
                    Eggs
                  </button>
                  <button onclick="showConfigTab('locations')" id="tab-btn-locations" class="config-tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600">
                    Locations
                  </button>
                  <button onclick="showConfigTab('users')" id="tab-btn-users" class="config-tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600">
                    Users
                  </button>
                </nav>
              </div>

              <div class="mt-8">
                <!-- Eggs Tab -->
                <div id="config-tab-eggs" class="config-tab-content">
                  <div class="space-y-6">
                    <div>
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Server Eggs</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Select nest and egg from your Pterodactyl Panel to configure server types</p>
                      
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nest</label>
                          <select id="nest-select" onchange="loadEggs()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                            <option value="">Select a nest...</option>
                          </select>
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Egg</label>
                          <select id="egg-select" onchange="selectEgg()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500" disabled>
                            <option value="">Select an egg...</option>
                          </select>
                        </div>
                      </div>

                      <div id="egg-config-form" class="mt-6 space-y-4 hidden">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Display Name</label>
                          <input type="text" id="egg-display-name" placeholder="e.g., Paper" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Internal Name (used in settings.json)</label>
                          <input type="text" id="egg-internal-name" placeholder="e.g., paper" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div class="grid grid-cols-3 gap-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min RAM (MB)</label>
                            <input type="number" id="egg-min-ram" value="1024" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min Disk (MB)</label>
                            <input type="number" id="egg-min-disk" value="1024" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min CPU (%)</label>
                            <input type="number" id="egg-min-cpu" value="100" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Max Databases</label>
                            <input type="number" id="egg-max-databases" value="4" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Max Backups</label>
                            <input type="number" id="egg-max-backups" value="4" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                        </div>
                        <button onclick="saveEgg()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition">
                          Save Egg Configuration
                        </button>
                      </div>

                      <div id="existing-eggs" class="mt-8">
                        <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-4">Configured Eggs</h4>
                        <div id="eggs-list" class="space-y-2"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Locations Tab -->
                <div id="config-tab-locations" class="config-tab-content hidden">
                  <div class="space-y-8">
                    <!-- Locations Section -->
                    <div>
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Locations</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Map Pterodactyl locations to packages</p>
                      
                      <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Location</label>
                        <select id="location-select" onchange="selectLocation()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          <option value="">Select a location...</option>
                        </select>
                      </div>

                      <div id="location-config-form" class="mt-6 space-y-4 hidden">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Original Name</label>
                          <input type="text" id="location-original-name" readonly class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Custom Display Name</label>
                          <input type="text" id="location-display-name" placeholder="e.g., US East - New York" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Custom name shown to users (leave empty to use original)</p>
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Assigned Package (optional)</label>
                          <input type="text" id="location-package" placeholder="e.g., default" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Leave empty for no package restriction</p>
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Available Nodes</label>
                          <div id="location-nodes-checkboxes" class="space-y-2 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 max-h-48 overflow-y-auto">
                            <p class="text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
                          </div>
                          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Select which nodes users can deploy servers to at this location</p>
                        </div>
                        <button onclick="saveLocation()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition">
                          Save Location Configuration
                        </button>
                      </div>

                      <div id="existing-locations" class="mt-8">
                        <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-4">Configured Locations</h4>
                        <div id="locations-list" class="space-y-2"></div>
                      </div>
                    </div>

                    <!-- Nodes Section -->
                    <div class="pt-8 border-t border-gray-200 dark:border-gray-700">
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Nodes</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Customize display names for your nodes</p>
                      
                      <div id="nodes-config-list" class="space-y-3"></div>
                    </div>
                  </div>
                </div>

                <!-- Users Tab -->
                <div id="config-tab-users" class="config-tab-content hidden">
                  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <!-- Left Column: User Search & Selection -->
                    <div class="lg:col-span-1">
                      <div class="sticky top-6">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">User Search</h3>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mb-4">Search by username, email or Discord ID</p>
                        
                        <div class="relative mb-4">
                          <input type="text" 
                            id="user-search-input" 
                            placeholder="Search users..." 
                            oninput="searchUsers()"
                            class="w-full px-4 py-2.5 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 text-sm">
                          <svg class="absolute left-3 top-3 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                          </svg>
                          <div id="user-search-results" class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg shadow-xl hidden max-h-80 overflow-y-auto"></div>
                        </div>

                        <!-- Selected User Card -->
                        <div id="selected-user-card" class="hidden">
                          <div class="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 p-5 rounded-xl border border-blue-100 dark:border-gray-600">
                            <div class="flex items-center gap-3 mb-4">
                              <img id="selected-user-avatar" src="" class="w-14 h-14 rounded-full border-2 border-white dark:border-gray-700 shadow-md">
                              <div class="flex-1 min-w-0">
                                <p id="selected-user-name" class="font-semibold text-gray-900 dark:text-gray-100 truncate"></p>
                                <p id="selected-user-id" class="text-xs text-gray-500 dark:text-gray-400 truncate"></p>
                              </div>
                            </div>
                            
                            <div class="mb-3">
                              <span id="selected-user-package" class="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full">
                                📦 default
                              </span>
                            </div>
                            
                            <div class="grid grid-cols-2 gap-2">
                              <div class="bg-white dark:bg-gray-800 p-2.5 rounded-lg">
                                <p class="text-xs text-gray-500 dark:text-gray-400">Coins</p>
                                <p id="selected-user-coins" class="text-lg font-bold text-gray-900 dark:text-gray-100">0</p>
                              </div>
                              <div class="bg-white dark:bg-gray-800 p-2.5 rounded-lg">
                                <p class="text-xs text-gray-500 dark:text-gray-400">Servers</p>
                                <p id="selected-user-servers" class="text-lg font-bold text-gray-900 dark:text-gray-100">0</p>
                              </div>
                              <div class="bg-white dark:bg-gray-800 p-2.5 rounded-lg">
                                <p class="text-xs text-gray-500 dark:text-gray-400">RAM</p>
                                <p id="selected-user-ram" class="text-sm font-semibold text-gray-900 dark:text-gray-100">0 MB</p>
                              </div>
                              <div class="bg-white dark:bg-gray-800 p-2.5 rounded-lg">
                                <p class="text-xs text-gray-500 dark:text-gray-400">Disk</p>
                                <p id="selected-user-disk" class="text-sm font-semibold text-gray-900 dark:text-gray-100">0 MB</p>
                              </div>
                              <div class="bg-white dark:bg-gray-800 p-2.5 rounded-lg col-span-2">
                                <p class="text-xs text-gray-500 dark:text-gray-400">CPU</p>
                                <p id="selected-user-cpu" class="text-sm font-semibold text-gray-900 dark:text-gray-100">0%</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Right Column: Management Actions -->
                    <div class="lg:col-span-2 space-y-4">
                      <div id="user-management-panel" class="hidden space-y-4">
                        <!-- Coins Management -->
                        <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                          <div class="bg-gradient-to-r from-yellow-500 to-orange-500 px-5 py-3">
                            <h4 class="text-sm font-semibold text-white flex items-center gap-2">
                              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"></path>
                              </svg>
                              Coins Management
                            </h4>
                          </div>
                          <div class="p-5">
                            <div class="flex gap-3">
                              <div class="flex-1">
                                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5">Amount</label>
                                <input type="number" id="coins-amount" placeholder="100" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-yellow-500 text-sm">
                              </div>
                              <div class="flex items-end gap-2">
                                <button onclick="addCoinsToUser()" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition text-sm flex items-center gap-1.5 shadow-sm">
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                  </svg>
                                  Add
                                </button>
                                <button onclick="setCoinsForUser()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition text-sm shadow-sm">
                                  Set
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>

                        <!-- Resources Management -->
                        <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                          <div class="bg-gradient-to-r from-purple-500 to-pink-500 px-5 py-3">
                            <h4 class="text-sm font-semibold text-white flex items-center gap-2">
                              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M3 12v3c0 1.657 3.134 3 7 3s7-1.343 7-3v-3c0 1.657-3.134 3-7 3s-7-1.343-7-3z"></path>
                                <path d="M3 7v3c0 1.657 3.134 3 7 3s7-1.343 7-3V7c0 1.657-3.134 3-7 3S3 8.657 3 7z"></path>
                                <path d="M17 5c0 1.657-3.134 3-7 3S3 6.657 3 5s3.134-3 7-3 7 1.343 7 3z"></path>
                              </svg>
                              Resources Management
                            </h4>
                          </div>
                          <div class="p-5">
                            <div class="mb-3 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                              <p class="text-xs text-blue-700 dark:text-blue-300">
                                💡 <strong>Tip:</strong> Use positive numbers to set exact values (e.g., 2048). Use negative numbers to subtract (e.g., -512 removes 512MB).
                              </p>
                            </div>
                            <div class="grid grid-cols-2 gap-3 mb-3">
                              <div>
                                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5">RAM (MB)</label>
                                <input type="number" id="resource-ram" placeholder="1024 or -512" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 text-sm">
                              </div>
                              <div>
                                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5">Disk (MB)</label>
                                <input type="number" id="resource-disk" placeholder="2048 or -1024" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 text-sm">
                              </div>
                              <div>
                                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5">CPU (%)</label>
                                <input type="number" id="resource-cpu" placeholder="100 or -50" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 text-sm">
                              </div>
                              <div>
                                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5">Server Slots</label>
                                <input type="number" id="resource-servers" placeholder="1 or -1" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 text-sm">
                              </div>
                            </div>
                            <button onclick="setResourcesForUser()" class="w-full px-4 py-2.5 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-lg font-medium transition shadow-sm">
                              Set Resources
                            </button>
                          </div>
                        </div>
                      </div>

                      <!-- Empty State -->
                      <div id="user-management-empty" class="text-center py-16">
                        <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                        <p class="mt-4 text-sm text-gray-500 dark:text-gray-400">Search and select a user to manage their account</p>
                      </div>
                    </div>
                  </div>

                  <!-- All Users Section -->
                  <div class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between mb-4">
                      <div>
                        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">All Users</h3>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Showing all users from Pterodactyl panel</p>
                      </div>
                      <button onclick="loadAllUsers()" class="px-4 py-2 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-lg font-medium transition flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Refresh
                      </button>
                    </div>
                    <div id="all-users-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"></div>
                  </div>
                </div>
              </div>
            </div>


      </main>
      <%- include('../components/footer') %>
    </div>
  </div>

  <script>
    // Global state
    let nestsData = [];
    let eggsData = [];
    let locationsData = [];
    let nodesData = [];
    let selectedEggData = null;
    let selectedLocationData = null;
    let currentSettings = <%- JSON.stringify(settings.api.client || {}) %>;

    // Tab switching
    function showConfigTab(tabName) {
      // Hide all tabs
      document.querySelectorAll('.config-tab-content').forEach(tab => {
        tab.classList.add('hidden');
      });
      
      // Remove active class from all buttons
      document.querySelectorAll('.config-tab-button').forEach(btn => {
        btn.classList.remove('border-blue-500', 'text-blue-600', 'dark:text-blue-400');
        btn.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
      });
      
      // Show selected tab
      document.getElementById('config-tab-' + tabName).classList.remove('hidden');
      
      // Set active button
      const activeBtn = document.getElementById('tab-btn-' + tabName);
      activeBtn.classList.add('border-blue-500', 'text-blue-600', 'dark:text-blue-400');
      activeBtn.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
      
      // Load data if needed
      if (tabName === 'eggs' && nestsData.length === 0) {
        loadNests();
        loadExistingEggs();
      } else if (tabName === 'locations' && locationsData.length === 0) {
        loadLocations();
        loadExistingLocations();
        loadNodes();
      } else if (tabName === 'users') {
        loadAllUsers();
      }
    }

    // Load nests
    async function loadNests() {
      try {
        console.log('Loading nests from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/nests');
        console.log('Nests response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Nests data received:', data);
        nestsData = data.data || [];
        
        const nestSelect = document.getElementById('nest-select');
        nestSelect.innerHTML = '<option value="">Select a nest...</option>';
        nestsData.forEach(nest => {
          const option = document.createElement('option');
          option.value = nest.attributes.id;
          option.textContent = nest.attributes.name;
          nestSelect.appendChild(option);
        });
        console.log('Loaded', nestsData.length, 'nests');
      } catch (err) {
        console.error('Failed to load nests:', err);
        alert('Failed to load nests from Pterodactyl Panel. Check console for details.');
      }
    }

    // Load eggs for selected nest
    async function loadEggs() {
      const nestId = document.getElementById('nest-select').value;
      if (!nestId) {
        document.getElementById('egg-select').disabled = true;
        document.getElementById('egg-select').innerHTML = '<option value="">Select an egg...</option>';
        return;
      }

      try {
        const response = await fetch(`/admin/pterodactyl/eggs?nest=${nestId}`);
        const data = await response.json();
        eggsData = data.data || [];
        
        const eggSelect = document.getElementById('egg-select');
        eggSelect.disabled = false;
        eggSelect.innerHTML = '<option value="">Select an egg...</option>';
        eggsData.forEach(egg => {
          const option = document.createElement('option');
          option.value = egg.attributes.id;
          option.textContent = egg.attributes.name;
          eggSelect.appendChild(option);
        });
      } catch (err) {
        console.error('Failed to load eggs:', err);
        alert('Failed to load eggs from Pterodactyl Panel');
      }
    }

    // Select egg
    function selectEgg() {
      const eggId = document.getElementById('egg-select').value;
      if (!eggId) {
        document.getElementById('egg-config-form').classList.add('hidden');
        return;
      }

      selectedEggData = eggsData.find(e => e.attributes.id == eggId);
      if (!selectedEggData) return;

      document.getElementById('egg-config-form').classList.remove('hidden');
      document.getElementById('egg-display-name').value = selectedEggData.attributes.name;
      document.getElementById('egg-internal-name').value = selectedEggData.attributes.name.toLowerCase().replace(/\s+/g, '');
    }

    // Save egg configuration
    async function saveEgg() {
      const eggName = document.getElementById('egg-internal-name').value;
      const displayName = document.getElementById('egg-display-name').value;
      const minRam = parseInt(document.getElementById('egg-min-ram').value);
      const minDisk = parseInt(document.getElementById('egg-min-disk').value);
      const minCpu = parseInt(document.getElementById('egg-min-cpu').value);
      const maxDatabases = parseInt(document.getElementById('egg-max-databases').value);
      const maxBackups = parseInt(document.getElementById('egg-max-backups').value);

      if (!eggName || !displayName) {
        alert('Please fill in all required fields');
        return;
      }

      console.log('Saving egg configuration:', eggName);

      const eggData = {
        display: displayName,
        minimum: {
          ram: minRam,
          disk: minDisk,
          cpu: minCpu
        },
        maximum: {
          ram: null,
          disk: null,
          cpu: null
        },
        info: {
          egg: selectedEggData.attributes.id,
          docker_image: selectedEggData.attributes.docker_image,
          startup: selectedEggData.attributes.startup,
          environment: {},
          feature_limits: {
            databases: maxDatabases,
            backups: maxBackups
          }
        }
      };

      try {
        const response = await fetch('/admin/eggs/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ eggName, eggData })
        });

        const result = await response.json();
        if (result.success) {
          alert('Egg configuration saved successfully!');
          if (!currentSettings.eggs) currentSettings.eggs = {};
          currentSettings.eggs[eggName] = eggData;
          loadExistingEggs();
          document.getElementById('egg-config-form').classList.add('hidden');
          document.getElementById('nest-select').value = '';
          document.getElementById('egg-select').value = '';
          document.getElementById('egg-select').disabled = true;
        } else {
          alert('Failed to save egg: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to save egg:', err);
        alert('Failed to save egg configuration');
      }
    }

    // Load existing eggs
    function loadExistingEggs() {
      const eggsList = document.getElementById('eggs-list');
      const eggs = currentSettings.eggs || {};
      
      if (Object.keys(eggs).length === 0) {
        eggsList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No eggs configured yet</p>';
        return;
      }

      eggsList.innerHTML = '';
      Object.entries(eggs).forEach(([key, egg]) => {
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
        div.innerHTML = `
          <div>
            <h5 class="font-medium text-gray-900 dark:text-gray-100">${egg.display}</h5>
            <p class="text-xs text-gray-500 dark:text-gray-400">Internal: ${key} | Egg ID: ${egg.info.egg}</p>
            <p class="text-xs text-gray-500 dark:text-gray-400">Min: ${egg.minimum.ram}MB RAM, ${egg.minimum.disk}MB Disk, ${egg.minimum.cpu}% CPU</p>
          </div>
          <button onclick="deleteEgg('${key}')" class="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-lg">Delete</button>
        `;
        eggsList.appendChild(div);
      });
    }

    // Delete egg
    async function deleteEgg(eggName) {
      if (!confirm(`Are you sure you want to delete the egg "${eggName}"?`)) return;

      try {
        const response = await fetch('/admin/eggs/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ eggName })
        });

        const result = await response.json();
        if (result.success) {
          alert('Egg deleted successfully!');
          delete currentSettings.eggs[eggName];
          loadExistingEggs();
        } else {
          alert('Failed to delete egg: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to delete egg:', err);
        alert('Failed to delete egg');
      }
    }

    // Load locations
    async function loadLocations() {
      try {
        console.log('Loading locations from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/locations');
        console.log('Locations response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Locations data received:', data);
        locationsData = data.data || [];
        
        const locationSelect = document.getElementById('location-select');
        locationSelect.innerHTML = '<option value="">Select a location...</option>';
        locationsData.forEach(location => {
          const option = document.createElement('option');
          option.value = location.attributes.id;
          option.textContent = `${location.attributes.short} - ${location.attributes.long}`;
          locationSelect.appendChild(option);
        });
        console.log('Loaded', locationsData.length, 'locations');
      } catch (err) {
        console.error('Failed to load locations:', err);
        alert('Failed to load locations from Pterodactyl Panel. Check console for details.');
      }
    }

    // Load nodes
    async function loadNodes() {
      try {
        console.log('Loading nodes from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/nodes');
        console.log('Nodes response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Nodes data received:', data);
        nodesData = data.data || [];
        
        // Display nodes configuration list
        displayNodesConfig();
        console.log('Loaded', nodesData.length, 'nodes');
      } catch (err) {
        console.error('Failed to load nodes:', err);
        document.getElementById('nodes-config-list').innerHTML = '<p class="text-sm text-red-500">Failed to load nodes. Check console for details.</p>';
      }
    }

    // Display nodes with editable names
    function displayNodesConfig() {
      const nodesList = document.getElementById('nodes-config-list');
      
      if (nodesData.length === 0) {
        nodesList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes found</p>';
        return;
      }

      nodesList.innerHTML = '';
      nodesData.forEach(node => {
        const customName = currentSettings.nodes?.[node.attributes.id]?.displayName || '';
        
        const div = document.createElement('div');
        div.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
        
        const statusColor = node.attributes.maintenance_mode 
          ? 'text-yellow-600 dark:text-yellow-400' 
          : 'text-green-600 dark:text-green-400';
        
        const statusText = node.attributes.maintenance_mode ? 'Maintenance' : 'Online';
        
        div.innerHTML = `
          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <div>
                <div class="flex items-center gap-2">
                  <h5 class="font-medium text-gray-900 dark:text-gray-100">${node.attributes.name}</h5>
                  <span class="text-xs ${statusColor} font-medium">${statusText}</span>
                </div>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Node ID: ${node.attributes.id} | Location ID: ${node.attributes.location_id}</p>
              </div>
            </div>
            <div>
              <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Custom Display Name</label>
              <div class="flex gap-2">
                <input type="text" 
                  id="node-name-${node.attributes.id}" 
                  value="${customName}"
                  placeholder="e.g., US-Node-1 Premium"
                  class="flex-1 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                <button onclick="saveNodeName(${node.attributes.id})" class="px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition">Save</button>
              </div>
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Leave empty to show original name to users</p>
            </div>
          </div>
        `;
        nodesList.appendChild(div);
      });
    }

    // Save node display name
    async function saveNodeName(nodeId) {
      const displayName = document.getElementById(`node-name-${nodeId}`).value.trim();
      
      console.log('Saving node display name:', nodeId, displayName);

      try {
        const response = await fetch('/admin/nodes/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ nodeId, displayName })
        });

        const result = await response.json();
        if (result.success) {
          alert('Node display name saved successfully!');
          if (!currentSettings.nodes) currentSettings.nodes = {};
          currentSettings.nodes[nodeId] = { displayName };
        } else {
          alert('Failed to save node display name: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to save node display name:', err);
        alert('Failed to save node display name');
      }
    }

    // Select location
    function selectLocation() {
      const locationId = document.getElementById('location-select').value;
      if (!locationId) {
        document.getElementById('location-config-form').classList.add('hidden');
        return;
      }

      selectedLocationData = locationsData.find(l => l.attributes.id == locationId);
      if (!selectedLocationData) return;

      document.getElementById('location-config-form').classList.remove('hidden');
      
      // Set original name (readonly)
      document.getElementById('location-original-name').value = `${selectedLocationData.attributes.short} - ${selectedLocationData.attributes.long}`;
      
      // Load existing configuration
      const existingLocation = currentSettings.locations?.[locationId];
      
      // Set custom display name (editable)
      document.getElementById('location-display-name').value = existingLocation?.name || '';
      
      // Set package
      document.getElementById('location-package').value = existingLocation?.package || '';
      
      // Populate node checkboxes
      populateNodeCheckboxes(locationId, existingLocation?.nodes || []);
    }

    // Populate node checkboxes for location
    function populateNodeCheckboxes(locationId, selectedNodes) {
      const checkboxContainer = document.getElementById('location-nodes-checkboxes');
      
      if (nodesData.length === 0) {
        checkboxContainer.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes available</p>';
        return;
      }

      // Filter nodes that belong to this location
      const locationNodes = nodesData.filter(node => node.attributes.location_id == locationId);
      
      if (locationNodes.length === 0) {
        checkboxContainer.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes found for this location</p>';
        return;
      }

      checkboxContainer.innerHTML = '';
      locationNodes.forEach(node => {
        const isChecked = selectedNodes.includes(node.attributes.id.toString()) || selectedNodes.includes(node.attributes.id);
        
        const label = document.createElement('label');
        label.className = 'flex items-center space-x-2 p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded cursor-pointer';
        label.innerHTML = `
          <input type="checkbox" 
            value="${node.attributes.id}" 
            ${isChecked ? 'checked' : ''}
            class="location-node-checkbox h-4 w-4 text-blue-600 rounded border-gray-300 dark:border-gray-600">
          <span class="text-sm text-gray-900 dark:text-gray-100">${node.attributes.name}</span>
          <span class="text-xs text-gray-500 dark:text-gray-400">(ID: ${node.attributes.id})</span>
        `;
        checkboxContainer.appendChild(label);
      });
    }

    // Save location
    async function saveLocation() {
      const locationId = document.getElementById('location-select').value;
      const displayName = document.getElementById('location-display-name').value;
      const packageName = document.getElementById('location-package').value || null;

      if (!locationId) {
        alert('Please select a location');
        return;
      }

      // Get selected nodes
      const selectedNodes = [];
      document.querySelectorAll('.location-node-checkbox:checked').forEach(checkbox => {
        selectedNodes.push(parseInt(checkbox.value));
      });

      console.log('Saving location with nodes:', selectedNodes);

      const locationData = {
        name: displayName,
        package: packageName,
        nodes: selectedNodes
      };

      try {
        const response = await fetch('/admin/locations/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ locationId, locationData })
        });

        const result = await response.json();
        if (result.success) {
          alert('Location configuration saved successfully!');
          if (!currentSettings.locations) currentSettings.locations = {};
          currentSettings.locations[locationId] = locationData;
          loadExistingLocations();
          document.getElementById('location-config-form').classList.add('hidden');
          document.getElementById('location-select').value = '';
        } else {
          alert('Failed to save location: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to save location:', err);
        alert('Failed to save location configuration');
      }
    }

    // Load existing locations
    function loadExistingLocations() {
      const locationsList = document.getElementById('locations-list');
      const locations = currentSettings.locations || {};
      
      if (Object.keys(locations).length === 0) {
        locationsList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No locations configured yet</p>';
        return;
      }

      locationsList.innerHTML = '';
      Object.entries(locations).forEach(([key, location]) => {
        const nodesInfo = location.nodes && location.nodes.length > 0 
          ? `${location.nodes.length} node(s)` 
          : 'No nodes';
        
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
        div.innerHTML = `
          <div>
            <h5 class="font-medium text-gray-900 dark:text-gray-100">${location.name}</h5>
            <p class="text-xs text-gray-500 dark:text-gray-400">Location ID: ${key} | Package: ${location.package || 'None'}</p>
            <p class="text-xs text-gray-500 dark:text-gray-400">Available Nodes: ${nodesInfo}</p>
          </div>
          <button onclick="deleteLocation('${key}')" class="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-lg">Delete</button>
        `;
        locationsList.appendChild(div);
      });
    }

    // Delete location
    async function deleteLocation(locationId) {
      if (!confirm(`Are you sure you want to delete this location configuration?`)) return;

      try {
        const response = await fetch('/admin/locations/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ locationId })
        });

        const result = await response.json();
        if (result.success) {
          alert('Location deleted successfully!');
          delete currentSettings.locations[locationId];
          loadExistingLocations();
        } else {
          alert('Failed to delete location: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to delete location:', err);
        alert('Failed to delete location');
      }
    }



    // Global variable for selected user
    let selectedUser = null;

    // Search users with autocomplete
    let searchTimeout = null;
    async function searchUsers() {
      const query = document.getElementById('user-search-input').value.trim();
      const resultsDiv = document.getElementById('user-search-results');
      
      if (query.length < 2) {
        resultsDiv.classList.add('hidden');
        return;
      }

      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(async () => {
        try {
          const response = await fetch(`/admin/users/search?q=${encodeURIComponent(query)}`);
          const data = await response.json();
          
          if (data.users && data.users.length > 0) {
            resultsDiv.innerHTML = '';
            data.users.forEach(user => {
              const div = document.createElement('div');
              div.className = 'px-4 py-3 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer border-b border-gray-200 dark:border-gray-600 last:border-0';
              div.onclick = () => selectUser(user);
              div.innerHTML = `
                <div class="flex items-center gap-3">
                  <img src="https://cdn.discordapp.com/embed/avatars/${parseInt(user.discriminator) % 5}.png" 
                    class="w-10 h-10 rounded-full">
                  <div>
                    <p class="font-medium text-gray-900 dark:text-gray-100">${user.username}</p>
                    <p class="text-xs text-gray-500 dark:text-gray-400">ID: ${user.id}</p>
                  </div>
                </div>
              `;
              resultsDiv.appendChild(div);
            });
            resultsDiv.classList.remove('hidden');
          } else {
            resultsDiv.innerHTML = '<p class="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">No users found</p>';
            resultsDiv.classList.remove('hidden');
          }
        } catch (err) {
          console.error('Failed to search users:', err);
        }
      }, 300);
    }

    // Select user
    function selectUser(user) {
      console.log('selectUser called with:', user);
      selectedUser = user;
      document.getElementById('user-search-results').classList.add('hidden');
      
      // Show user card
      document.getElementById('selected-user-card').classList.remove('hidden');
      document.getElementById('user-management-panel').classList.remove('hidden');
      document.getElementById('user-management-empty').classList.add('hidden');
      
      // Update user card
      document.getElementById('selected-user-avatar').src = `https://cdn.discordapp.com/embed/avatars/${parseInt(user.discriminator) % 5}.png`;
      document.getElementById('selected-user-name').textContent = user.username;
      document.getElementById('selected-user-id').textContent = `ID: ${user.id}`;
      document.getElementById('selected-user-package').textContent = `📦 ${user.package || 'default'}`;
      document.getElementById('selected-user-coins').textContent = user.coins;
      document.getElementById('selected-user-servers').textContent = user.resources.servers;
      document.getElementById('selected-user-ram').textContent = `${user.resources.ram} MB`;
      document.getElementById('selected-user-disk').textContent = `${user.resources.disk} MB`;
      document.getElementById('selected-user-cpu').textContent = `${user.resources.cpu}%`;
      console.log('User card DOM updated with resources:', user.resources);
    }

    // Add coins to user
    async function addCoinsToUser() {
      if (!selectedUser) {
        alert('Please select a user first');
        return;
      }
      
      const amount = parseInt(document.getElementById('coins-amount').value);
      if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid amount');
        return;
      }

      try {
        const response = await fetch(`/addcoins?id=${selectedUser.id}&coins=${amount}`);
        if (response.redirected || response.ok) {
          alert(`Successfully added ${amount} coins to ${selectedUser.username}`);
          document.getElementById('coins-amount').value = '';
          // Refresh user data
          const searchResponse = await fetch(`/admin/users/search?q=${selectedUser.id}`);
          const data = await searchResponse.json();
          if (data.users && data.users.length > 0) {
            selectUser(data.users[0]);
          }
          loadAllUsers();
        }
      } catch (err) {
        console.error('Failed to add coins:', err);
        alert('Failed to add coins');
      }
    }

    // Set coins for user
    async function setCoinsForUser() {
      if (!selectedUser) {
        alert('Please select a user first');
        return;
      }
      
      const amount = parseInt(document.getElementById('coins-amount').value);
      if (isNaN(amount) || amount < 0) {
        alert('Please enter a valid amount');
        return;
      }

      try {
        const response = await fetch(`/setcoins?id=${selectedUser.id}&coins=${amount}`);
        if (response.redirected || response.ok) {
          alert(`Successfully set coins to ${amount} for ${selectedUser.username}`);
          document.getElementById('coins-amount').value = '';
          // Refresh user data
          const searchResponse = await fetch(`/admin/users/search?q=${selectedUser.id}`);
          const data = await searchResponse.json();
          if (data.users && data.users.length > 0) {
            selectUser(data.users[0]);
          }
          loadAllUsers();
        }
      } catch (err) {
        console.error('Failed to set coins:', err);
        alert('Failed to set coins');
      }
    }

    // Set resources for user
    async function setResourcesForUser() {
      if (!selectedUser) {
        alert('Please select a user first');
        return;
      }
      
      const ramInput = document.getElementById('resource-ram').value;
      const diskInput = document.getElementById('resource-disk').value;
      const cpuInput = document.getElementById('resource-cpu').value;
      const serversInput = document.getElementById('resource-servers').value;
      
      const ram = ramInput ? parseInt(ramInput) : 0;
      const disk = diskInput ? parseInt(diskInput) : 0;
      const cpu = cpuInput ? parseInt(cpuInput) : 0;
      const servers = serversInput ? parseInt(serversInput) : 0;

      if (ram === 0 && disk === 0 && cpu === 0 && servers === 0) {
        alert('Please enter at least one resource amount (positive to set, negative to subtract)');
        return;
      }

      try {
        // Only pass parameters that have values
        const params = new URLSearchParams({ id: selectedUser.id });
        if (ramInput) params.append('ram', ram);
        if (diskInput) params.append('disk', disk);
        if (cpuInput) params.append('cpu', cpu);
        if (serversInput) params.append('servers', servers);
        
        const response = await fetch(`/setresources?${params.toString()}`);
        if (response.redirected || response.ok) {
          document.getElementById('resource-ram').value = '';
          document.getElementById('resource-disk').value = '';
          document.getElementById('resource-cpu').value = '';
          document.getElementById('resource-servers').value = '';
          
          // Wait for database to update across cluster workers, then refresh user data
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Force fresh data with cache busting
          const searchResponse = await fetch(`/admin/users/search?q=${selectedUser.id}&_=${Date.now()}`);
          const data = await searchResponse.json();
          console.log('Refresh data received:', data);
          if (data.users && data.users.length > 0) {
            console.log('Updating user card with:', data.users[0]);
            selectUser(data.users[0]);
            console.log('User card updated');
          } else {
            console.error('No user data returned from search');
          }
          await loadAllUsers();
          
          alert(`Successfully updated resources for ${selectedUser.username}!`);
        }
      } catch (err) {
        console.error('Failed to set resources:', err);
        alert('Failed to set resources');
      }
    }

    // Load all users
    async function loadAllUsers() {
      try {
        console.log('Loading all users...');
        const response = await fetch('/admin/users/all');
        const data = await response.json();
        
        const usersList = document.getElementById('all-users-list');
        if (!data.users || data.users.length === 0) {
          usersList.innerHTML = '<div class="col-span-full text-center py-8"><p class="text-sm text-gray-500 dark:text-gray-400">No users found</p></div>';
          return;
        }

        usersList.innerHTML = '';
        data.users.forEach(user => {
          const div = document.createElement('div');
          div.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-500 dark:hover:border-blue-500 transition cursor-pointer';
          div.onclick = () => selectUser(user);
          div.innerHTML = `
            <div class="flex items-center gap-3 mb-3">
              <img src="https://cdn.discordapp.com/embed/avatars/${parseInt(user.discriminator) % 5}.png" 
                class="w-10 h-10 rounded-full">
              <div class="flex-1 min-w-0">
                <p class="font-medium text-gray-900 dark:text-gray-100 truncate text-sm">${user.username}</p>
                <p class="text-xs text-gray-500 dark:text-gray-400 truncate">${user.id}</p>
              </div>
            </div>
            <div class="grid grid-cols-2 gap-2 mb-2">
              <div class="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                <p class="text-xs text-gray-500 dark:text-gray-400">Coins</p>
                <p class="text-sm font-semibold text-gray-900 dark:text-gray-100">${user.coins}</p>
              </div>
              <div class="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                <p class="text-xs text-gray-500 dark:text-gray-400">RAM</p>
                <p class="text-sm font-semibold text-gray-900 dark:text-gray-100">${user.resources.ram}MB</p>
              </div>
              <div class="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                <p class="text-xs text-gray-500 dark:text-gray-400">Disk</p>
                <p class="text-sm font-semibold text-gray-900 dark:text-gray-100">${user.resources.disk}MB</p>
              </div>
              <div class="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                <p class="text-xs text-gray-500 dark:text-gray-400">CPU</p>
                <p class="text-sm font-semibold text-gray-900 dark:text-gray-100">${user.resources.cpu}%</p>
              </div>
            </div>
            <div class="flex items-center gap-2">
              <span class="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full">
                📦 ${user.package || 'default'}
              </span>
              <span class="text-xs bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 px-2 py-1 rounded-full">
                🖥️ ${user.resources.servers} servers
              </span>
            </div>
          `;
          usersList.appendChild(div);
        });
        console.log('Loaded', data.users.length, 'users');
      } catch (err) {
        console.error('Failed to load users:', err);
        document.getElementById('all-users-list').innerHTML = '<div class="col-span-full"><p class="text-sm text-red-500">Failed to load users</p></div>';
      }
    }

    // Hide search results when clicking outside
    document.addEventListener('click', function(event) {
      const searchInput = document.getElementById('user-search-input');
      const searchResults = document.getElementById('user-search-results');
      if (searchInput && searchResults && !searchInput.contains(event.target) && !searchResults.contains(event.target)) {
        searchResults.classList.add('hidden');
      }
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('config-tab-eggs')) {
        loadNests();
        loadExistingEggs();
      }
    });
  </script>
</body>
</html>
