<html <% if (isDarkMode) { %> class="dark" <% } %>>
<head>
  <title><%= settings.name %></title>
  <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
  <script>
    (function() {
      try {
        var ls = localStorage.getItem('darkMode');
        var preferDark = (ls === 'true') || (ls === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
        if (preferDark) document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      } catch (e) {}
    })();
  </script>
  <link rel="stylesheet" href="../assets/tailwind.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://unpkg.com/@popperjs/core@2.10.1/dist/umd/popper.min.js"></script>
  <!-- Inter font -->
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script>
    // Fetch the latest version from the site
    fetch('https://atqr.pages.dev/heliactyl.json')
      .then(response => response.json())
      .then(data => {
        const currentVersion = '<%= settings.version %>';
        const latestVersion = data.latest;

        // Update the version information in the content
        const versionSpan = document.getElementById('currentVersion');
        const releaseSpan = document.getElementById('releaseInfo');
        const versionStatusSpan = document.getElementById('versionStatus');

        versionSpan.textContent = currentVersion;

        if (currentVersion === latestVersion) {
          versionStatusSpan.textContent = 'You are running the latest version. Good job!';
          versionStatusSpan.classList.add('text-gray-600', 'text-xs', 'pt-2');
        } else {
          const link = document.createElement('a');
          link.href = 'https://github.com/heliactyloss/heliactyl/releases/tag/' + latestVersion;
          link.classList.add('text-amber-500', 'transition', 'hover:text-amber-600', 'font-medium');
          link.textContent = 'here';

          const linkText = document.createTextNode(`Helium ${latestVersion} is ready to be updated to. Please click `);
          versionStatusSpan.appendChild(linkText);
          versionStatusSpan.appendChild(link);
          versionStatusSpan.appendChild(document.createTextNode(' to download it'));
          versionStatusSpan.classList.add('text-amber-500', 'text-xs', 'pt-2');
        }

        // Show the content
        document.getElementById('content').classList.remove('hidden');
      })
      .catch(error => {
        console.error('Error fetching latest version:', error);
        // Show the content even if the fetch fails
        document.getElementById('content').classList.remove('hidden');
      });
  </script>
</head>

<body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200" style="font-family: 'Inter', sans-serif;">
  <div>
    <%- include('../components/navigation') %>
    <div class="md:pl-64 flex flex-col flex-1 min-h-screen">
      <main class="flex-1 pb-8">
        <div class="py-6">
          <%- include('../components/darkmode-toggle') %>
          <% /* Skeleton loader, lasts about 0.3s to let the page content load */ %>
          <%- include('../components/skeleton') %>
          <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
            <!-- Content -->
            <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
              <div class="min-w-0 flex-1">
                <div class="flex">
                  <div class="relative">
                    <div class="bg-gray-200 rounded-2xl h-11 w-11 text-center flex text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                        <path fill-rule="evenodd" d="M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6Zm14.25 6a.75.75 0 0 1-.22.53l-2.25 2.25a.75.75 0 1 1-1.06-1.06L15.44 12l-1.72-1.72a.75.75 0 1 1 1.06-1.06l2.25 2.25c.141.14.22.331.22.53Zm-10.28-.53a.75.75 0 0 0 0 1.06l2.25 2.25a.75.75 0 1 0 1.06-1.06L8.56 12l1.72-1.72a.75.75 0 1 0-1.06-1.06l-2.25 2.25Z" clip-rule="evenodd" />
                      </svg>
                    </div>
                  </div>
                  <div class="relative ml-4">
                    <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Admin</h2>
                    <p class="text-xs font-thin text-gray-500">Perform admin actions on the Helium dashboard.</p>
                  </div>
                </div>
              </div>
            </div>
            <% if (req.query.err) { %>
            <div class="rounded-3xl bg-gray-200 p-8 mb-5">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 text-gray-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-md font-medium tracking-tight text-gray-700">An error was encountered</h3>
                  <div class="mt-1 text-sm text-gray-500">
                    <p>Error code: <code><%= req.query.err %></code></p>
                  </div>
                </div>
              </div>
            </div>
            <% } %>
            <div class="lg:flex lg:items-center lg:justify-between p-8 border border-gray-200 rounded-3xl">
              <div class="min-w-0 flex-1 ml-4">
                <h2 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight">Helium version 1</h2>
                <p class="text-xs mt-2 font-thin text-gray-500 mb-2">
                  This dashboard is running Helium version <span class="bg-gray-200 px-2 py-1 mb-2 rounded-full" id="currentVersion"></span>
                </p>
                <span id="versionStatus"></span>
              </div>
              <div class="mt-5 flex lg:ml-4 lg:mt-0">
                <span class="sm:ml-3 mr-3">
                  <img src="https://atqr.pages.dev/v2Favicon.png" class="h-20 rounded-3xl bg-gray-200 p-3">
                </span>
              </div>
            </div>

            <!-- Panel Configuration -->
            <div class="bg-white dark:bg-gray-800 rounded-3xl p-8 border border-gray-200 dark:border-gray-700 mt-10">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6">Panel Configuration</h2>
              <div class="border-b border-gray-200 dark:border-gray-700">
                <nav class="-mb-px flex space-x-8">
                  <button onclick="showConfigTab('eggs')" id="tab-btn-eggs" class="config-tab-button border-b-2 border-blue-500 py-4 px-1 text-sm font-medium text-blue-600 dark:text-blue-400">
                    Eggs
                  </button>
                  <button onclick="showConfigTab('locations')" id="tab-btn-locations" class="config-tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600">
                    Locations
                  </button>
                  <button onclick="showConfigTab('nests')" id="tab-btn-nests" class="config-tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600">
                    Nests
                  </button>
                </nav>
              </div>

              <div class="mt-8">
                <!-- Eggs Tab -->
                <div id="config-tab-eggs" class="config-tab-content">
                  <div class="space-y-6">
                    <div>
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Server Eggs</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Select nest and egg from your Pterodactyl Panel to configure server types</p>
                      
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nest</label>
                          <select id="nest-select" onchange="loadEggs()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                            <option value="">Select a nest...</option>
                          </select>
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Egg</label>
                          <select id="egg-select" onchange="selectEgg()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500" disabled>
                            <option value="">Select an egg...</option>
                          </select>
                        </div>
                      </div>

                      <div id="egg-config-form" class="mt-6 space-y-4 hidden">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Display Name</label>
                          <input type="text" id="egg-display-name" placeholder="e.g., Paper" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Internal Name (used in settings.json)</label>
                          <input type="text" id="egg-internal-name" placeholder="e.g., paper" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div class="grid grid-cols-3 gap-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min RAM (MB)</label>
                            <input type="number" id="egg-min-ram" value="1024" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min Disk (MB)</label>
                            <input type="number" id="egg-min-disk" value="1024" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Min CPU (%)</label>
                            <input type="number" id="egg-min-cpu" value="100" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Max Databases</label>
                            <input type="number" id="egg-max-databases" value="4" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Max Backups</label>
                            <input type="number" id="egg-max-backups" value="4" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          </div>
                        </div>
                        <button onclick="saveEgg()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition">
                          Save Egg Configuration
                        </button>
                      </div>

                      <div id="existing-eggs" class="mt-8">
                        <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-4">Configured Eggs</h4>
                        <div id="eggs-list" class="space-y-2"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Locations Tab -->
                <div id="config-tab-locations" class="config-tab-content hidden">
                  <div class="space-y-8">
                    <!-- Locations Section -->
                    <div>
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Locations</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Map Pterodactyl locations to packages</p>
                      
                      <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Location</label>
                        <select id="location-select" onchange="selectLocation()" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          <option value="">Select a location...</option>
                        </select>
                      </div>

                      <div id="location-config-form" class="mt-6 space-y-4 hidden">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Display Name</label>
                          <input type="text" id="location-display-name" readonly class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white">
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Assigned Package (optional)</label>
                          <input type="text" id="location-package" placeholder="e.g., default" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500">
                          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Leave empty for no package restriction</p>
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Available Nodes</label>
                          <div id="location-nodes-checkboxes" class="space-y-2 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 max-h-48 overflow-y-auto">
                            <p class="text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
                          </div>
                          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Select which nodes users can deploy servers to at this location</p>
                        </div>
                        <button onclick="saveLocation()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition">
                          Save Location Configuration
                        </button>
                      </div>

                      <div id="existing-locations" class="mt-8">
                        <h4 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-4">Configured Locations</h4>
                        <div id="locations-list" class="space-y-2"></div>
                      </div>
                    </div>

                    <!-- Nodes Section -->
                    <div class="pt-8 border-t border-gray-200 dark:border-gray-700">
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Configure Nodes</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">View and manage nodes from your Pterodactyl Panel</p>
                      
                      <div id="nodes-list" class="space-y-2"></div>
                    </div>
                  </div>
                </div>

                <!-- Nests Tab -->
                <div id="config-tab-nests" class="config-tab-content hidden">
                  <div class="space-y-6">
                    <div>
                      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Available Nests</h3>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">View nests available in your Pterodactyl Panel</p>
                      <div id="nests-list" class="space-y-2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Add coins -->
            <div class="card mt-10">
              <div class="card-body">
                <h1 class="text-xl font-semibold text-gray-700 dark:text-gray-100 sm:truncate tracking-tight mb-4">Add coins</h1>
                <% /* Discord ID */ %>
                <label for="location" class="text-sm font-medium text-gray-600">Discord ID</label><br>
                <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="id1" placeholder="000000000000000000">

                <% /* Amount */ %>
                <label for="location" class="text-sm font-medium text-gray-600">Amount</label><br>
                <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="amount1" placeholder="100">

                <% /* Submit form */ %>
                <a href="javascript:addCoins()" type="button" class="mt-6 transition inline-flex items-center rounded-2xl bg-gray-200 px-8 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600">
                  Add
                </a>
              </div>
              <script>
                async function addCoins() {
                  let id1 = encodeURIComponent(document.getElementById("id1").value);
                  let amount1 = encodeURIComponent(document.getElementById("amount1").value);
                  document.location.href = `/addcoins?id=${id1}&coins=${amount1}`;
                };
              </script>

              <!-- Add resources -->
              <div class="card mt-10">
                <div class="card-body">
                  <h1 class="text-xl font-semibold text-gray-700 sm:truncate tracking-tight mb-4">Add resources</h1>
                  <% /* Discord ID */ %>
                  <label for="location" class="text-sm font-medium text-gray-600">Discord ID</label><br>
                  <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="id2" placeholder="000000000000000000">

                  <% /* CPU */ %>
                  <label for="location" class="text-sm font-medium text-gray-600">CPU Cores</label><br>
                  <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="cpu" placeholder="1">

                  <% /* Memory */ %>
                  <label for="location" class="text-sm font-medium text-gray-600">Memory (GiB)</label><br>
                  <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="memory" placeholder="2">

                  <% /* Storage */ %>
                  <label for="location" class="text-sm font-medium text-gray-600">Storage (GiB)</label><br>
                  <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="storage" placeholder="10">

                  <% /* Servers */ %>
                  <label for="location" class="text-sm font-medium text-gray-600">Servers</label><br>
                  <input type="text" class="mt-3 mb-4 px-4 py-2 focus:border-gray-400 focus:ring-gray-600 border border-gray-200 shadow-sm transition ease-in-out delay-100 group relative flex w-1/4 text-sm justify-center form-control rounded-xl placeholder:text-gray-400 text-gray-600" id="servers" placeholder="5">

                  <% /* Submit form */ %>
                  <a href="javascript:addResources()" type="button" class="mt-6 transition inline-flex items-center rounded-2xl bg-gray-200 px-8 py-2 text-sm font-medium text-gray-600 hover:bg-gray-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600">
                    Add
                  </a>
                </div>
                <script>
                  async function addResources() {
                    let id2 = encodeURIComponent(document.getElementById("id2").value);
                    let cpu = encodeURIComponent(document.getElementById("cpu").value * 100);
                    let memory = encodeURIComponent(document.getElementById("memory").value * 1024);
                    let storage = encodeURIComponent(document.getElementById("storage").value * 1024);
                    let servers = encodeURIComponent(document.getElementById("servers").value);
                    document.location.href = `/addresources?id=${id2}&cpu=${cpu}&ram=${memory}&disk=${storage}&servers=${servers}`;
                  };
                </script>
              </div>
            </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>

  <script>
    // Global state
    let nestsData = [];
    let eggsData = [];
    let locationsData = [];
    let nodesData = [];
    let selectedEggData = null;
    let selectedLocationData = null;
    let currentSettings = <%- JSON.stringify(settings.api.client || {}) %>;

    // Tab switching
    function showConfigTab(tabName) {
      // Hide all tabs
      document.querySelectorAll('.config-tab-content').forEach(tab => {
        tab.classList.add('hidden');
      });
      
      // Remove active class from all buttons
      document.querySelectorAll('.config-tab-button').forEach(btn => {
        btn.classList.remove('border-blue-500', 'text-blue-600', 'dark:text-blue-400');
        btn.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
      });
      
      // Show selected tab
      document.getElementById('config-tab-' + tabName).classList.remove('hidden');
      
      // Set active button
      const activeBtn = document.getElementById('tab-btn-' + tabName);
      activeBtn.classList.add('border-blue-500', 'text-blue-600', 'dark:text-blue-400');
      activeBtn.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
      
      // Load data if needed
      if (tabName === 'eggs' && nestsData.length === 0) {
        loadNests();
        loadExistingEggs();
      } else if (tabName === 'locations' && locationsData.length === 0) {
        loadLocations();
        loadExistingLocations();
        loadNodes();
      } else if (tabName === 'nests' && nestsData.length === 0) {
        loadNestsDisplay();
      }
    }

    // Load nests
    async function loadNests() {
      try {
        console.log('Loading nests from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/nests');
        console.log('Nests response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Nests data received:', data);
        nestsData = data.data || [];
        
        const nestSelect = document.getElementById('nest-select');
        nestSelect.innerHTML = '<option value="">Select a nest...</option>';
        nestsData.forEach(nest => {
          const option = document.createElement('option');
          option.value = nest.attributes.id;
          option.textContent = nest.attributes.name;
          nestSelect.appendChild(option);
        });
        console.log('Loaded', nestsData.length, 'nests');
      } catch (err) {
        console.error('Failed to load nests:', err);
        alert('Failed to load nests from Pterodactyl Panel. Check console for details.');
      }
    }

    // Load eggs for selected nest
    async function loadEggs() {
      const nestId = document.getElementById('nest-select').value;
      if (!nestId) {
        document.getElementById('egg-select').disabled = true;
        document.getElementById('egg-select').innerHTML = '<option value="">Select an egg...</option>';
        return;
      }

      try {
        const response = await fetch(`/admin/pterodactyl/eggs?nest=${nestId}`);
        const data = await response.json();
        eggsData = data.data || [];
        
        const eggSelect = document.getElementById('egg-select');
        eggSelect.disabled = false;
        eggSelect.innerHTML = '<option value="">Select an egg...</option>';
        eggsData.forEach(egg => {
          const option = document.createElement('option');
          option.value = egg.attributes.id;
          option.textContent = egg.attributes.name;
          eggSelect.appendChild(option);
        });
      } catch (err) {
        console.error('Failed to load eggs:', err);
        alert('Failed to load eggs from Pterodactyl Panel');
      }
    }

    // Select egg
    function selectEgg() {
      const eggId = document.getElementById('egg-select').value;
      if (!eggId) {
        document.getElementById('egg-config-form').classList.add('hidden');
        return;
      }

      selectedEggData = eggsData.find(e => e.attributes.id == eggId);
      if (!selectedEggData) return;

      document.getElementById('egg-config-form').classList.remove('hidden');
      document.getElementById('egg-display-name').value = selectedEggData.attributes.name;
      document.getElementById('egg-internal-name').value = selectedEggData.attributes.name.toLowerCase().replace(/\s+/g, '');
    }

    // Save egg configuration
    async function saveEgg() {
      const eggName = document.getElementById('egg-internal-name').value;
      const displayName = document.getElementById('egg-display-name').value;
      const minRam = parseInt(document.getElementById('egg-min-ram').value);
      const minDisk = parseInt(document.getElementById('egg-min-disk').value);
      const minCpu = parseInt(document.getElementById('egg-min-cpu').value);
      const maxDatabases = parseInt(document.getElementById('egg-max-databases').value);
      const maxBackups = parseInt(document.getElementById('egg-max-backups').value);

      if (!eggName || !displayName) {
        alert('Please fill in all required fields');
        return;
      }

      console.log('Saving egg configuration:', eggName);

      const eggData = {
        display: displayName,
        minimum: {
          ram: minRam,
          disk: minDisk,
          cpu: minCpu
        },
        maximum: {
          ram: null,
          disk: null,
          cpu: null
        },
        info: {
          egg: selectedEggData.attributes.id,
          docker_image: selectedEggData.attributes.docker_image,
          startup: selectedEggData.attributes.startup,
          environment: {},
          feature_limits: {
            databases: maxDatabases,
            backups: maxBackups
          }
        }
      };

      try {
        const response = await fetch('/admin/eggs/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ eggName, eggData })
        });

        const result = await response.json();
        if (result.success) {
          alert('Egg configuration saved successfully!');
          if (!currentSettings.eggs) currentSettings.eggs = {};
          currentSettings.eggs[eggName] = eggData;
          loadExistingEggs();
          document.getElementById('egg-config-form').classList.add('hidden');
          document.getElementById('nest-select').value = '';
          document.getElementById('egg-select').value = '';
          document.getElementById('egg-select').disabled = true;
        } else {
          alert('Failed to save egg: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to save egg:', err);
        alert('Failed to save egg configuration');
      }
    }

    // Load existing eggs
    function loadExistingEggs() {
      const eggsList = document.getElementById('eggs-list');
      const eggs = currentSettings.eggs || {};
      
      if (Object.keys(eggs).length === 0) {
        eggsList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No eggs configured yet</p>';
        return;
      }

      eggsList.innerHTML = '';
      Object.entries(eggs).forEach(([key, egg]) => {
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
        div.innerHTML = `
          <div>
            <h5 class="font-medium text-gray-900 dark:text-gray-100">${egg.display}</h5>
            <p class="text-xs text-gray-500 dark:text-gray-400">Internal: ${key} | Egg ID: ${egg.info.egg}</p>
            <p class="text-xs text-gray-500 dark:text-gray-400">Min: ${egg.minimum.ram}MB RAM, ${egg.minimum.disk}MB Disk, ${egg.minimum.cpu}% CPU</p>
          </div>
          <button onclick="deleteEgg('${key}')" class="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-lg">Delete</button>
        `;
        eggsList.appendChild(div);
      });
    }

    // Delete egg
    async function deleteEgg(eggName) {
      if (!confirm(`Are you sure you want to delete the egg "${eggName}"?`)) return;

      try {
        const response = await fetch('/admin/eggs/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ eggName })
        });

        const result = await response.json();
        if (result.success) {
          alert('Egg deleted successfully!');
          delete currentSettings.eggs[eggName];
          loadExistingEggs();
        } else {
          alert('Failed to delete egg: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to delete egg:', err);
        alert('Failed to delete egg');
      }
    }

    // Load locations
    async function loadLocations() {
      try {
        console.log('Loading locations from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/locations');
        console.log('Locations response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Locations data received:', data);
        locationsData = data.data || [];
        
        const locationSelect = document.getElementById('location-select');
        locationSelect.innerHTML = '<option value="">Select a location...</option>';
        locationsData.forEach(location => {
          const option = document.createElement('option');
          option.value = location.attributes.id;
          option.textContent = `${location.attributes.short} - ${location.attributes.long}`;
          locationSelect.appendChild(option);
        });
        console.log('Loaded', locationsData.length, 'locations');
      } catch (err) {
        console.error('Failed to load locations:', err);
        alert('Failed to load locations from Pterodactyl Panel. Check console for details.');
      }
    }

    // Load nodes
    async function loadNodes() {
      try {
        console.log('Loading nodes from Pterodactyl Panel...');
        const response = await fetch('/admin/pterodactyl/nodes');
        console.log('Nodes response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Nodes data received:', data);
        nodesData = data.data || [];
        
        // Display nodes list
        const nodesList = document.getElementById('nodes-list');
        if (nodesData.length === 0) {
          nodesList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes found</p>';
          return;
        }

        nodesList.innerHTML = '';
        nodesData.forEach(node => {
          const div = document.createElement('div');
          div.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
          
          const statusColor = node.attributes.maintenance_mode 
            ? 'text-yellow-600 dark:text-yellow-400' 
            : 'text-green-600 dark:text-green-400';
          
          const statusText = node.attributes.maintenance_mode ? 'Maintenance' : 'Online';
          
          div.innerHTML = `
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center gap-2">
                  <h5 class="font-medium text-gray-900 dark:text-gray-100">${node.attributes.name}</h5>
                  <span class="text-xs ${statusColor} font-medium">${statusText}</span>
                </div>
                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Node ID: ${node.attributes.id} | FQDN: ${node.attributes.fqdn}</p>
                <p class="text-xs text-gray-500 dark:text-gray-400">Location ID: ${node.attributes.location_id}</p>
                <div class="mt-2 grid grid-cols-3 gap-2 text-xs">
                  <div>
                    <span class="text-gray-500 dark:text-gray-400">RAM:</span>
                    <span class="text-gray-900 dark:text-gray-100 ml-1">${(node.attributes.memory / 1024).toFixed(1)} GB</span>
                  </div>
                  <div>
                    <span class="text-gray-500 dark:text-gray-400">Disk:</span>
                    <span class="text-gray-900 dark:text-gray-100 ml-1">${(node.attributes.disk / 1024).toFixed(1)} GB</span>
                  </div>
                  <div>
                    <span class="text-gray-500 dark:text-gray-400">Allocated RAM:</span>
                    <span class="text-gray-900 dark:text-gray-100 ml-1">${(node.attributes.allocated_resources?.memory || 0) / 1024} GB</span>
                  </div>
                </div>
              </div>
            </div>
          `;
          nodesList.appendChild(div);
        });
        console.log('Loaded', nodesData.length, 'nodes');
      } catch (err) {
        console.error('Failed to load nodes:', err);
        document.getElementById('nodes-list').innerHTML = '<p class="text-sm text-red-500">Failed to load nodes. Check console for details.</p>';
      }
    }

    // Select location
    function selectLocation() {
      const locationId = document.getElementById('location-select').value;
      if (!locationId) {
        document.getElementById('location-config-form').classList.add('hidden');
        return;
      }

      selectedLocationData = locationsData.find(l => l.attributes.id == locationId);
      if (!selectedLocationData) return;

      document.getElementById('location-config-form').classList.remove('hidden');
      document.getElementById('location-display-name').value = `${selectedLocationData.attributes.short} - ${selectedLocationData.attributes.long}`;
      
      // Load existing package if configured
      const existingLocation = currentSettings.locations?.[locationId];
      document.getElementById('location-package').value = existingLocation?.package || '';
      
      // Populate node checkboxes
      populateNodeCheckboxes(locationId, existingLocation?.nodes || []);
    }

    // Populate node checkboxes for location
    function populateNodeCheckboxes(locationId, selectedNodes) {
      const checkboxContainer = document.getElementById('location-nodes-checkboxes');
      
      if (nodesData.length === 0) {
        checkboxContainer.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes available</p>';
        return;
      }

      // Filter nodes that belong to this location
      const locationNodes = nodesData.filter(node => node.attributes.location_id == locationId);
      
      if (locationNodes.length === 0) {
        checkboxContainer.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nodes found for this location</p>';
        return;
      }

      checkboxContainer.innerHTML = '';
      locationNodes.forEach(node => {
        const isChecked = selectedNodes.includes(node.attributes.id.toString()) || selectedNodes.includes(node.attributes.id);
        
        const label = document.createElement('label');
        label.className = 'flex items-center space-x-2 p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded cursor-pointer';
        label.innerHTML = `
          <input type="checkbox" 
            value="${node.attributes.id}" 
            ${isChecked ? 'checked' : ''}
            class="location-node-checkbox h-4 w-4 text-blue-600 rounded border-gray-300 dark:border-gray-600">
          <span class="text-sm text-gray-900 dark:text-gray-100">${node.attributes.name}</span>
          <span class="text-xs text-gray-500 dark:text-gray-400">(ID: ${node.attributes.id})</span>
        `;
        checkboxContainer.appendChild(label);
      });
    }

    // Save location
    async function saveLocation() {
      const locationId = document.getElementById('location-select').value;
      const displayName = document.getElementById('location-display-name').value;
      const packageName = document.getElementById('location-package').value || null;

      if (!locationId) {
        alert('Please select a location');
        return;
      }

      // Get selected nodes
      const selectedNodes = [];
      document.querySelectorAll('.location-node-checkbox:checked').forEach(checkbox => {
        selectedNodes.push(parseInt(checkbox.value));
      });

      console.log('Saving location with nodes:', selectedNodes);

      const locationData = {
        name: displayName,
        package: packageName,
        nodes: selectedNodes
      };

      try {
        const response = await fetch('/admin/locations/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ locationId, locationData })
        });

        const result = await response.json();
        if (result.success) {
          alert('Location configuration saved successfully!');
          if (!currentSettings.locations) currentSettings.locations = {};
          currentSettings.locations[locationId] = locationData;
          loadExistingLocations();
          document.getElementById('location-config-form').classList.add('hidden');
          document.getElementById('location-select').value = '';
        } else {
          alert('Failed to save location: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to save location:', err);
        alert('Failed to save location configuration');
      }
    }

    // Load existing locations
    function loadExistingLocations() {
      const locationsList = document.getElementById('locations-list');
      const locations = currentSettings.locations || {};
      
      if (Object.keys(locations).length === 0) {
        locationsList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No locations configured yet</p>';
        return;
      }

      locationsList.innerHTML = '';
      Object.entries(locations).forEach(([key, location]) => {
        const nodesInfo = location.nodes && location.nodes.length > 0 
          ? `${location.nodes.length} node(s)` 
          : 'No nodes';
        
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
        div.innerHTML = `
          <div>
            <h5 class="font-medium text-gray-900 dark:text-gray-100">${location.name}</h5>
            <p class="text-xs text-gray-500 dark:text-gray-400">Location ID: ${key} | Package: ${location.package || 'None'}</p>
            <p class="text-xs text-gray-500 dark:text-gray-400">Available Nodes: ${nodesInfo}</p>
          </div>
          <button onclick="deleteLocation('${key}')" class="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded-lg">Delete</button>
        `;
        locationsList.appendChild(div);
      });
    }

    // Delete location
    async function deleteLocation(locationId) {
      if (!confirm(`Are you sure you want to delete this location configuration?`)) return;

      try {
        const response = await fetch('/admin/locations/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ locationId })
        });

        const result = await response.json();
        if (result.success) {
          alert('Location deleted successfully!');
          delete currentSettings.locations[locationId];
          loadExistingLocations();
        } else {
          alert('Failed to delete location: ' + (result.error || 'Unknown error'));
        }
      } catch (err) {
        console.error('Failed to delete location:', err);
        alert('Failed to delete location');
      }
    }

    // Load nests display
    async function loadNestsDisplay() {
      try {
        const response = await fetch('/admin/pterodactyl/nests');
        const data = await response.json();
        const nests = data.data || [];
        
        const nestsList = document.getElementById('nests-list');
        if (nests.length === 0) {
          nestsList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No nests found</p>';
          return;
        }

        nestsList.innerHTML = '';
        nests.forEach(nest => {
          const div = document.createElement('div');
          div.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';
          div.innerHTML = `
            <h5 class="font-medium text-gray-900 dark:text-gray-100">${nest.attributes.name}</h5>
            <p class="text-xs text-gray-500 dark:text-gray-400">Nest ID: ${nest.attributes.id}</p>
            <p class="text-sm text-gray-600 dark:text-gray-300 mt-2">${nest.attributes.description || 'No description'}</p>
          `;
          nestsList.appendChild(div);
        });
      } catch (err) {
        console.error('Failed to load nests:', err);
        document.getElementById('nests-list').innerHTML = '<p class="text-sm text-red-500">Failed to load nests</p>';
      }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('config-tab-eggs')) {
        loadNests();
        loadExistingEggs();
      }
    });
  </script>
</body>
</html>
