<html <% if (isDarkMode) { %> class="dark" <% } %>>
<head>
  <title><%= settings.name %> - API Keys</title>
  <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
  <script>
    (function() {
      try {
        var ls = localStorage.getItem('darkMode');
        var preferDark = (ls === 'true') || (ls === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
        if (preferDark) document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      } catch (e) {}
    })();
  </script>
  <link rel="stylesheet" href="../assets/tailwind.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200" style="font-family: 'Inter', sans-serif;">
  <div>
    <%- include('../components/navigation') %>
    <div class="md:pl-64 flex flex-col flex-1 min-h-screen">
      <main class="flex-1 pb-8">
        <div class="py-6">
          <%- include('../components/darkmode-toggle') %>
          <%- include('../components/skeleton') %>
          <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
            
            <!-- Header -->
            <div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
              <div class="min-w-0 flex-1">
                <div class="flex">
                  <div class="relative">
                    <div class="bg-gray-200 dark:bg-gray-800 rounded-2xl h-11 w-11 text-center flex text-gray-400 dark:text-gray-500">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
                        <path fill-rule="evenodd" d="M15.75 1.5a6.75 6.75 0 0 0-6.651 7.906c.067.39-.032.717-.221.906l-6.5 6.499a3 3 0 0 0-.878 2.121v2.818c0 .414.336.75.75.75H6a.75.75 0 0 0 .75-.75v-1.5h1.5A.75.75 0 0 0 9 19.5V18h1.5a.75.75 0 0 0 .53-.22l2.658-2.658c.19-.189.517-.288.906-.22A6.75 6.75 0 1 0 15.75 1.5Zm0 3a.75.75 0 0 0 0 1.5A2.25 2.25 0 0 1 18 8.25a.75.75 0 0 0 1.5 0 3.75 3.75 0 0 0-3.75-3.75Z" clip-rule="evenodd" />
                      </svg>
                    </div>
                  </div>
                  <div class="relative ml-4">
                    <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-200 sm:truncate tracking-tight">API Keys</h2>
                    <p class="text-xs font-thin text-gray-500 dark:text-gray-400">Manage API keys for dashboard and Discord bot integration</p>
                  </div>
                </div>
              </div>
              <div class="mt-5 flex lg:ml-4 lg:mt-0">
                <button onclick="showCreateModal()" class="transition inline-flex items-center rounded-2xl bg-blue-500 hover:bg-blue-600 px-6 py-2 text-sm font-medium text-white shadow-sm">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-2">
                    <path d="M10.75 4.75a.75.75 0 0 0-1.5 0v4.5h-4.5a.75.75 0 0 0 0 1.5h4.5v4.5a.75.75 0 0 0 1.5 0v-4.5h4.5a.75.75 0 0 0 0-1.5h-4.5v-4.5Z" />
                  </svg>
                  Create API Key
                </button>
              </div>
            </div>

            <!-- Alert Messages -->
            <div id="alert-success" class="hidden rounded-3xl bg-emerald-50 dark:bg-emerald-900/20 p-8 mb-5">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-emerald-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-md font-medium tracking-tight text-emerald-800 dark:text-emerald-200" id="alert-success-text"></h3>
                </div>
              </div>
            </div>

            <div id="alert-error" class="hidden rounded-3xl bg-red-50 dark:bg-red-900/20 p-8 mb-5">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 text-red-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-md font-medium tracking-tight text-red-800 dark:text-red-200" id="alert-error-text"></h3>
                </div>
              </div>
            </div>

            <!-- API Keys Table -->
            <div class="card">
              <div class="card-body">
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead>
                      <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">API Key</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Permissions</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Created</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Last Used</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="api-keys-table" class="divide-y divide-gray-200 dark:divide-gray-700">
                      <!-- API keys will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>

  <!-- Create API Key Modal -->
  <div id="create-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-3xl p-8 max-w-md w-full mx-4">
      <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">Create New API Key</h3>
      
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Key Name</label>
        <input type="text" id="key-name" placeholder="My Discord Bot" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      </div>

      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Permissions</label>
        <div class="space-y-2">
          <label class="flex items-center">
            <input type="checkbox" value="*" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Full Access (*)</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" value="users.read" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Read Users</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" value="users.write" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Write Users</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" value="servers.read" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Read Servers</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" value="servers.control" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Control Servers</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" value="servers.delete" class="permission-check rounded text-blue-600 mr-2">
            <span class="text-sm text-gray-700 dark:text-gray-300">Delete Servers</span>
          </label>
        </div>
      </div>

      <div class="flex gap-3">
        <button onclick="createApiKey()" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition">Create</button>
        <button onclick="hideCreateModal()" class="flex-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-xl hover:bg-gray-300 dark:hover:bg-gray-600 transition">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Show API Key Modal -->
  <div id="show-key-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-3xl p-8 max-w-lg w-full mx-4">
      <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">API Key Created Successfully</h3>
      
      <div class="mb-4">
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">Save this API key now. You won't be able to see it again!</p>
        <div class="bg-gray-100 dark:bg-gray-900 rounded-xl p-4 break-all font-mono text-sm">
          <code id="new-api-key" class="text-gray-900 dark:text-gray-100"></code>
        </div>
      </div>

      <div class="flex gap-3">
        <button onclick="copyApiKey()" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition">Copy to Clipboard</button>
        <button onclick="hideShowKeyModal()" class="flex-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-xl hover:bg-gray-300 dark:hover:bg-gray-600 transition">Close</button>
      </div>
    </div>
  </div>

  <script>
    let apiKeys = [];

    async function loadApiKeys() {
      try {
        const response = await fetch('/admin/api-keys');
        const data = await response.json();
        
        if (data.success) {
          apiKeys = data.data;
          renderApiKeys();
        } else {
          showError('Failed to load API keys');
        }
      } catch (error) {
        console.error('Error loading API keys:', error);
        showError('Failed to load API keys');
      }
    }

    function renderApiKeys() {
      const tbody = document.getElementById('api-keys-table');
      
      if (apiKeys.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="px-6 py-8 text-center text-gray-500 dark:text-gray-400">No API keys found. Create one to get started.</td></tr>';
        return;
      }

      tbody.innerHTML = apiKeys.map(key => {
        const permissions = JSON.parse(key.permissions);
        const lastUsed = key.last_used_at ? new Date(key.last_used_at).toLocaleString() : 'Never';
        const created = key.created_at ? new Date(key.created_at).toLocaleDateString() : 'Unknown';
        const maskedKey = key.api_key.substring(0, 12) + '...' + key.api_key.substring(key.api_key.length - 8);
        
        return `
          <tr>
            <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${key.key_name}</td>
            <td class="px-6 py-4 text-sm">
              <div class="flex items-center gap-2">
                <span id="key-${key.id}" class="font-mono text-gray-600 dark:text-gray-400" data-full="${key.api_key}" data-masked="${maskedKey}">${maskedKey}</span>
                <button onclick="toggleKeyVisibility(${key.id})" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" title="Show/Hide Key">
                  <svg id="eye-${key.id}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                  </svg>
                </button>
                <button onclick="copyKey(${key.id})" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" title="Copy Key">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 0 1-.75.75H9a.75.75 0 0 1-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184" />
                  </svg>
                </button>
              </div>
            </td>
            <td class="px-6 py-4 text-sm text-gray-600 dark:text-gray-400">${permissions.join(', ')}</td>
            <td class="px-6 py-4">
              <span class="px-2 py-1 text-xs rounded-full ${key.enabled ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' : 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'}">
                ${key.enabled ? 'Enabled' : 'Disabled'}
              </span>
            </td>
            <td class="px-6 py-4 text-sm text-gray-600 dark:text-gray-400">${created}</td>
            <td class="px-6 py-4 text-sm text-gray-600 dark:text-gray-400">${lastUsed}</td>
            <td class="px-6 py-4 text-sm">
              <div class="flex gap-2">
                <button onclick="toggleApiKey(${key.id}, ${!key.enabled})" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium">
                  ${key.enabled ? 'Disable' : 'Enable'}
                </button>
                <button onclick="deleteApiKey(${key.id}, '${key.key_name}')" class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 font-medium">
                  Delete
                </button>
              </div>
            </td>
          </tr>
        `;
      }).join('');
    }

    function toggleKeyVisibility(keyId) {
      const keyElement = document.getElementById(`key-${keyId}`);
      const eyeIcon = document.getElementById(`eye-${keyId}`);
      const fullKey = keyElement.dataset.full;
      const maskedKey = keyElement.dataset.masked;
      
      if (keyElement.textContent === maskedKey) {
        // Show full key
        keyElement.textContent = fullKey;
        eyeIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88" />
        `;
      } else {
        // Hide key
        keyElement.textContent = maskedKey;
        eyeIcon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
        `;
      }
    }

    function copyKey(keyId) {
      const keyElement = document.getElementById(`key-${keyId}`);
      const fullKey = keyElement.dataset.full;
      
      navigator.clipboard.writeText(fullKey).then(() => {
        showSuccess('API key copied to clipboard!');
      }).catch(() => {
        showError('Failed to copy API key');
      });
    }

    function showCreateModal() {
      document.getElementById('create-modal').classList.remove('hidden');
    }

    function hideCreateModal() {
      document.getElementById('create-modal').classList.add('hidden');
      document.getElementById('key-name').value = '';
      document.querySelectorAll('.permission-check').forEach(cb => cb.checked = false);
    }

    function hideShowKeyModal() {
      document.getElementById('show-key-modal').classList.add('hidden');
      loadApiKeys();
    }

    async function createApiKey() {
      const keyName = document.getElementById('key-name').value.trim();
      const permissions = Array.from(document.querySelectorAll('.permission-check:checked')).map(cb => cb.value);

      if (!keyName) {
        showError('Please enter a key name');
        return;
      }

      if (permissions.length === 0) {
        showError('Please select at least one permission');
        return;
      }

      try {
        const response = await fetch('/admin/api-keys/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ keyName, permissions })
        });

        const data = await response.json();

        if (data.success) {
          document.getElementById('new-api-key').textContent = data.data.api_key;
          hideCreateModal();
          document.getElementById('show-key-modal').classList.remove('hidden');
          showSuccess('API key created successfully');
        } else {
          showError(data.error || 'Failed to create API key');
        }
      } catch (error) {
        console.error('Error creating API key:', error);
        showError('Failed to create API key');
      }
    }

    async function deleteApiKey(id, name) {
      const confirmMsg = `Are you sure you want to delete the API key "${name}"?\n\nThis action cannot be undone and will immediately revoke access for any services using this key.`;
      
      if (!confirm(confirmMsg)) {
        return;
      }

      try {
        const response = await fetch(`/admin/api-keys/${id}`, {
          method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
          showSuccess(`API key "${name}" deleted successfully`);
          loadApiKeys();
        } else {
          showError(data.error || 'Failed to delete API key');
        }
      } catch (error) {
        console.error('Error deleting API key:', error);
        showError('Failed to delete API key');
      }
    }

    async function toggleApiKey(id, enabled) {
      try {
        const response = await fetch(`/admin/api-keys/${id}/toggle`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ enabled })
        });

        const data = await response.json();

        if (data.success) {
          showSuccess(data.message);
          loadApiKeys();
        } else {
          showError(data.error || 'Failed to toggle API key');
        }
      } catch (error) {
        console.error('Error toggling API key:', error);
        showError('Failed to toggle API key');
      }
    }

    function copyApiKey() {
      const apiKey = document.getElementById('new-api-key').textContent;
      navigator.clipboard.writeText(apiKey).then(() => {
        showSuccess('API key copied to clipboard');
      });
    }

    function showSuccess(message) {
      const alert = document.getElementById('alert-success');
      document.getElementById('alert-success-text').textContent = message;
      alert.classList.remove('hidden');
      setTimeout(() => alert.classList.add('hidden'), 5000);
    }

    function showError(message) {
      const alert = document.getElementById('alert-error');
      document.getElementById('alert-error-text').textContent = message;
      alert.classList.remove('hidden');
      setTimeout(() => alert.classList.add('hidden'), 5000);
    }

    loadApiKeys();
  </script>
</body>
</html>
