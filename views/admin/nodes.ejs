<html <% if (isDarkMode) { %> class="dark" <% } %>>
<head>
  <title><%= settings.name %> - Node Management</title>
  <link rel="icon" type="image/x-icon" href="../assets/favicon.png">
  <script>
    (function() {
      try {
        var ls = localStorage.getItem('darkMode');
        var preferDark = (ls === 'true') || (ls === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
        if (preferDark) document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      } catch (e) {}
    })();
  </script>
  <link rel="stylesheet" href="../assets/tailwind.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200" style="font-family: 'Inter', sans-serif;">
  <div>
    <%- include('../components/navigation') %>
    <div class="md:pl-64 flex flex-col flex-1 min-h-screen">
      <main class="flex-1 pb-8">
        <div class="py-6">
          <%- include('../components/darkmode-toggle') %>
          <%- include('../components/skeleton') %>
          <div class="hidden max-w-7xl pt-8 mx-auto px-4 sm:px-6 md:px-8" id="content">
            
<div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
  <div class="min-w-0 flex-1">
    <div class="flex">
      <div class="relative">
        <div class="bg-gray-200 dark:bg-gray-800 rounded-2xl h-11 w-11 text-center flex text-gray-400 dark:text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
            <path d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z" />
            <path fill-rule="evenodd" d="M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      <div class="relative ml-4">
        <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-200 sm:truncate tracking-tight">Node Management</h2>
        <p class="text-xs font-thin text-gray-500 dark:text-gray-400">Configure server limits and monitor node capacity</p>
      </div>
    </div>
  </div>
</div>

<div class="bg-white dark:bg-gray-800 rounded-3xl shadow-sm p-6 mb-6">
  <div class="flex items-center justify-between mb-6">
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Locations & Nodes</h3>
      <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Manage nodes grouped by their locations</p>
    </div>
    <button onclick="refreshNodes()" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 inline-block mr-1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
      </svg>
      Refresh
    </button>
  </div>
  
  <div id="nodes-list" class="space-y-6">
    <div class="text-center py-8">
      <svg class="animate-spin h-8 w-8 text-gray-400 dark:text-gray-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
    </div>
  </div>
</div>

<script>
async function refreshNodes() {
  const nodesList = document.getElementById('nodes-list');
  nodesList.innerHTML = `
    <div class="text-center py-8">
      <svg class="animate-spin h-8 w-8 text-gray-400 dark:text-gray-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
    </div>
  `;
  
  try {
    const response = await fetch('/admin/nodes/list');
    const data = await response.json();
    
    if (data.nodes && data.nodes.length > 0) {
      // Group nodes by location
      const locationGroups = {};
      data.nodes.forEach(node => {
        const locationKey = node.location || 'Uncategorized';
        if (!locationGroups[locationKey]) {
          locationGroups[locationKey] = [];
        }
        locationGroups[locationKey].push(node);
      });
      
      // Sort locations alphabetically
      const sortedLocations = Object.keys(locationGroups).sort();
      
      nodesList.innerHTML = sortedLocations.map(location => {
        const nodes = locationGroups[location];
        const totalServers = nodes.reduce((sum, node) => sum + node.currentServers, 0);
        const totalLimit = nodes.reduce((sum, node) => sum + (node.limit || 0), 0);
        const hasLimits = nodes.some(node => node.limit > 0);
        
        return `
          <div class="border border-gray-300 dark:border-gray-600 rounded-2xl overflow-hidden">
            <!-- Location Header -->
            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-700 dark:to-gray-750 px-6 py-4 border-b border-gray-300 dark:border-gray-600">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="bg-white dark:bg-gray-800 rounded-xl p-2 shadow-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600 dark:text-blue-400">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-bold text-gray-900 dark:text-gray-100">${location}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-400">${nodes.length} node${nodes.length !== 1 ? 's' : ''}</p>
                  </div>
                </div>
                <div class="text-right">
                  <p class="text-sm font-medium text-gray-700 dark:text-gray-300">Total Servers: <span class="font-bold">${totalServers}</span></p>
                  ${hasLimits ? `<p class="text-xs text-gray-500 dark:text-gray-400">Combined Limit: ${totalLimit > 0 ? totalLimit : 'Unlimited'}</p>` : ''}
                </div>
              </div>
            </div>
            
            <!-- Nodes in this location -->
            <div class="p-6 space-y-4 bg-white dark:bg-gray-800">
              ${nodes.map(node => `
        <div class="border border-gray-200 dark:border-gray-700 rounded-xl p-5 bg-gray-50 dark:bg-gray-750 hover:shadow-md transition-shadow">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-gray-500 dark:text-gray-400">
                  <path d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z" />
                  <path fill-rule="evenodd" d="M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" clip-rule="evenodd" />
                </svg>
                <h4 class="text-base font-bold text-gray-900 dark:text-gray-100">${node.name}</h4>
                <span class="px-2.5 py-0.5 text-xs font-semibold rounded-full ${
                  node.status === 'full' ? 'bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300' :
                  node.status === 'available' ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300' :
                  'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300'
                }">
                  ${node.status === 'full' ? 'FULL' : node.status === 'available' ? 'AVAILABLE' : 'NO LIMIT'}
                </span>
              </div>
              <p class="text-xs text-gray-500 dark:text-gray-500 mb-3 ml-8">
                üåê ${node.fqdn}
              </p>
              <div class="flex items-center gap-6 text-sm ml-8">
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-blue-500">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 14.25h13.5m-13.5 0a3 3 0 01-3-3m3 3a3 3 0 100 6h13.5a3 3 0 100-6m-16.5-3a3 3 0 013-3h13.5a3 3 0 013 3m-19.5 0a4.5 4.5 0 01.9-2.7L5.737 5.1a3.375 3.375 0 012.7-1.35h7.126c1.062 0 2.062.5 2.7 1.35l2.587 3.45a4.5 4.5 0 01.9 2.7m0 0a3 3 0 01-3 3m0 3h.008v.008h-.008v-.008zm0-6h.008v.008h-.008v-.008zm-3 6h.008v.008h-.008v-.008zm0-6h.008v.008h-.008v-.008z" />
                  </svg>
                  <span class="text-gray-600 dark:text-gray-400">Servers:</span>
                  <span class="font-bold text-gray-900 dark:text-gray-100">${node.currentServers}</span>
                  ${node.limit > 0 ? `<span class="text-gray-400 dark:text-gray-500">/ ${node.limit}</span>` : ''}
                </div>
                ${node.limit === 0 ? `
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-green-500">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="text-green-600 dark:text-green-400 font-medium">Unlimited</span>
                </div>
                ` : `
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 ${
                    node.percentUsed >= 90 ? 'text-red-500' :
                    node.percentUsed >= 70 ? 'text-yellow-500' :
                    'text-green-500'
                  }">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" />
                  </svg>
                  <span class="font-medium ${
                    node.percentUsed >= 90 ? 'text-red-600 dark:text-red-400' :
                    node.percentUsed >= 70 ? 'text-yellow-600 dark:text-yellow-400' :
                    'text-green-600 dark:text-green-400'
                  }">${node.percentUsed}% Used</span>
                </div>
                `}
              </div>
              ${node.limit > 0 ? `
              <div class="mt-3 ml-8">
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 overflow-hidden">
                  <div class="h-1.5 rounded-full transition-all duration-300 ${
                    node.percentUsed >= 90 ? 'bg-red-500' :
                    node.percentUsed >= 70 ? 'bg-yellow-500' :
                    'bg-green-500'
                  }" style="width: ${node.percentUsed}%"></div>
                </div>
              </div>
              ` : ''}
            </div>
            <div class="ml-4 flex flex-col gap-2">
              <button onclick="editNodeLimit(${node.id}, '${node.name}', ${node.limit})" 
                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors whitespace-nowrap">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 inline-block mr-1">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" />
                </svg>
                Set Limit
              </button>
            </div>
          </div>
        </div>
              `).join('')}
            </div>
          </div>
        `;
      }).join('');
    } else {
      nodesList.innerHTML = `
        <div class="text-center py-8">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-3">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
          </svg>
          <p class="text-sm text-gray-500 dark:text-gray-400">No nodes found</p>
        </div>
      `;
    }
  } catch (err) {
    console.error('Failed to load nodes:', err);
    nodesList.innerHTML = `
      <div class="text-center py-8">
        <p class="text-sm text-red-600 dark:text-red-400">Failed to load nodes</p>
      </div>
    `;
  }
}

function editNodeLimit(nodeId, nodeName, currentLimit) {
  const currentLimitText = currentLimit === 0 ? 'Unlimited' : currentLimit + ' servers';
  const newLimit = prompt(
    `Set Server Capacity Limit\n\n` +
    `Node: ${nodeName}\n` +
    `Current Limit: ${currentLimitText}\n\n` +
    `Enter new server limit:\n` +
    `‚Ä¢ Enter 0 for unlimited servers\n` +
    `‚Ä¢ Enter a number > 0 to set a specific limit`, 
    currentLimit
  );
  
  if (newLimit === null) return;
  
  const limitNum = parseInt(newLimit);
  if (isNaN(limitNum) || limitNum < 0) {
    alert('‚ö†Ô∏è Invalid Input\n\nPlease enter a valid number (0 or greater)');
    return;
  }
  
  // Show loading state
  const button = event.target;
  const originalText = button.innerHTML;
  button.disabled = true;
  button.innerHTML = `
    <svg class="animate-spin h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    Updating...
  `;
  
  fetch('/admin/nodes/setlimit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      nodeId: nodeId,
      limit: limitNum,
    }),
  })
  .then(res => res.json())
  .then(data => {
    button.disabled = false;
    button.innerHTML = originalText;
    
    if (data.success) {
      const limitText = limitNum === 0 ? 'Unlimited' : limitNum + ' servers';
      alert(`‚úÖ Success!\n\nNode: ${nodeName}\nNew Limit: ${limitText}\n\nThe node capacity has been updated.`);
      refreshNodes();
    } else {
      alert('‚ùå Failed to update node limit\n\n' + (data.error || 'Unknown error occurred'));
    }
  })
  .catch(err => {
    button.disabled = false;
    button.innerHTML = originalText;
    console.error('Error updating node limit:', err);
    alert('‚ùå Network Error\n\nFailed to update node limit. Please try again.');
  });
}

// Load nodes on page load
refreshNodes();
</script>

          </div>
        </div>
      </main>
      <%- include('../components/footer') %>
    </div>
  </div>
</body>
</html>
