<%- include('../components/template') %>

<div class="lg:flex lg:items-center lg:justify-between rounded-3xl mb-8">
  <div class="min-w-0 flex-1">
    <div class="flex">
      <div class="relative">
        <div class="bg-gray-200 dark:bg-gray-800 rounded-2xl h-11 w-11 text-center flex text-gray-400 dark:text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mt-3 ml-3">
            <path d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z" />
            <path fill-rule="evenodd" d="M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      <div class="relative ml-4">
        <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-200 sm:truncate tracking-tight">Node Management</h2>
        <p class="text-xs font-thin text-gray-500 dark:text-gray-400">Configure server limits and monitor node capacity</p>
      </div>
    </div>
  </div>
</div>

<div class="bg-white dark:bg-gray-800 rounded-3xl shadow-sm p-6 mb-6">
  <div class="flex items-center justify-between mb-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Nodes</h3>
    <button onclick="refreshNodes()" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 inline-block mr-1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
      </svg>
      Refresh
    </button>
  </div>
  
  <div id="nodes-list" class="space-y-4">
    <div class="text-center py-8">
      <svg class="animate-spin h-8 w-8 text-gray-400 dark:text-gray-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
    </div>
  </div>
</div>

<script>
async function refreshNodes() {
  const nodesList = document.getElementById('nodes-list');
  nodesList.innerHTML = `
    <div class="text-center py-8">
      <svg class="animate-spin h-8 w-8 text-gray-400 dark:text-gray-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading nodes...</p>
    </div>
  `;
  
  try {
    const response = await fetch('/admin/nodes/list');
    const data = await response.json();
    
    if (data.nodes && data.nodes.length > 0) {
      nodesList.innerHTML = data.nodes.map(node => `
        <div class="border border-gray-200 dark:border-gray-700 rounded-2xl p-6">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <h4 class="text-lg font-semibold text-gray-900 dark:text-gray-100">${node.name}</h4>
                <span class="px-2 py-1 text-xs font-medium rounded-full ${
                  node.status === 'full' ? 'bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300' :
                  node.status === 'available' ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300' :
                  'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300'
                }">
                  ${node.status === 'full' ? 'Full' : node.status === 'available' ? 'Available' : 'No Limit'}
                </span>
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
                üìç ${node.location} ‚Ä¢ ${node.fqdn}
              </p>
              <div class="flex items-center gap-6 text-sm">
                <div>
                  <span class="text-gray-500 dark:text-gray-400">Current Servers:</span>
                  <span class="font-semibold text-gray-900 dark:text-gray-100 ml-1">${node.currentServers}</span>
                </div>
                <div>
                  <span class="text-gray-500 dark:text-gray-400">Server Limit:</span>
                  <span class="font-semibold text-gray-900 dark:text-gray-100 ml-1">${node.limit === 0 ? 'Unlimited' : node.limit}</span>
                </div>
                ${node.limit > 0 ? `
                <div>
                  <span class="text-gray-500 dark:text-gray-400">Usage:</span>
                  <span class="font-semibold text-gray-900 dark:text-gray-100 ml-1">${node.percentUsed}%</span>
                </div>
                ` : ''}
              </div>
              ${node.limit > 0 ? `
              <div class="mt-3">
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div class="h-2 rounded-full transition-all ${
                    node.percentUsed >= 90 ? 'bg-red-500' :
                    node.percentUsed >= 70 ? 'bg-yellow-500' :
                    'bg-green-500'
                  }" style="width: ${node.percentUsed}%"></div>
                </div>
              </div>
              ` : ''}
            </div>
            <div class="ml-4">
              <button onclick="editNodeLimit(${node.id}, '${node.name}', ${node.limit})" 
                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors">
                Set Limit
              </button>
            </div>
          </div>
        </div>
      `).join('');
    } else {
      nodesList.innerHTML = `
        <div class="text-center py-8">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-3">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5.507 4.048A3 3 0 017.785 3h8.43a3 3 0 012.278 1.048l1.722 2.008A4.533 4.533 0 0019.5 6h-15c-.243 0-.482.02-.715.056l1.722-2.008z M1.5 10.5a3 3 0 013-3h15a3 3 0 110 6h-15a3 3 0 01-3-3zm15 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm2.25.75a.75.75 0 100-1.5.75.75 0 000 1.5zM4.5 15a3 3 0 100 6h15a3 3 0 100-6h-15zm11.25 3.75a.75.75 0 100-1.5.75.75 0 000 1.5zM19.5 18a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
          </svg>
          <p class="text-sm text-gray-500 dark:text-gray-400">No nodes found</p>
        </div>
      `;
    }
  } catch (err) {
    console.error('Failed to load nodes:', err);
    nodesList.innerHTML = `
      <div class="text-center py-8">
        <p class="text-sm text-red-600 dark:text-red-400">Failed to load nodes</p>
      </div>
    `;
  }
}

function editNodeLimit(nodeId, nodeName, currentLimit) {
  const newLimit = prompt(`Set server limit for ${nodeName}\n\nCurrent limit: ${currentLimit === 0 ? 'Unlimited' : currentLimit}\n\nEnter new limit (0 for unlimited):`, currentLimit);
  
  if (newLimit === null) return;
  
  const limitNum = parseInt(newLimit);
  if (isNaN(limitNum) || limitNum < 0) {
    alert('Please enter a valid number (0 or greater)');
    return;
  }
  
  fetch('/admin/nodes/setlimit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      nodeId: nodeId,
      limit: limitNum,
    }),
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert(`Node limit updated successfully!\n\n${nodeName} limit set to: ${limitNum === 0 ? 'Unlimited' : limitNum}`);
      refreshNodes();
    } else {
      alert('Failed to update node limit: ' + (data.error || 'Unknown error'));
    }
  })
  .catch(err => {
    console.error('Error updating node limit:', err);
    alert('Failed to update node limit');
  });
}

// Load nodes on page load
refreshNodes();
</script>

<%- include('../components/footer') %>
